/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CarroDao;
import dao.ClienteDao;
import dao.InstanceDao;
import dao.LocacaoCarroDao;
import dao.LocacaoMotoDao;
import dao.LocadoraDao;
import dao.MotoDao;
import design.DesignApp;
import idioma.IdiomaApp;
import java.awt.Color;
import static java.awt.Frame.NORMAL;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import java.util.Calendar;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import listener.TipNoFocus;
import modelos.Carro;
import modelos.Cliente;
import modelos.Locacao;
import modelos.Locadora;
import modelos.Moto;
import modelos.Veiculo;

/**
 *
 * @author Isaac
 */
public class LocadoraAdmVeiculos extends javax.swing.JFrame 
    implements WindowListener, FrameTheme, FrameMenuTheme,
    FrameLang, FrameMenuLang {
    
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private CarroDao carroDao = InstanceDao.CARRO_DAO;
    private MotoDao motoDao = InstanceDao.MOTO_DAO;
    private ClienteDao clienteDao = InstanceDao.CLIENTE_DAO;
    private LocacaoCarroDao locCarroDao = InstanceDao.LOCACAO_CARRO_DAO;
    private LocacaoMotoDao locMotoDao = InstanceDao.LOCACAO_MOTO_DAO;
    private Locadora locadoraAtual; //locadora add na classe anterior pelo addLocadora - locator added in the ancient class
    //private Locadora locadoraAtual = locadoraDao.get(1L) ; //to test
    
    private LocadoraEditCarro locacaoEditCarro;
    private LocadoraEditMoto locacaoEditMoto;
    ButtonGroup btnGroup1 = new ButtonGroup();
    ButtonGroup btnGroup2 = new ButtonGroup();
    ButtonGroup btnGroup3 = new ButtonGroup();
    
    private SpinnerNumberModel anoSpModel;
    private SpinnerNumberModel kmSpModel;
    private SpinnerNumberModel cavalosSpModel;
    private SpinnerNumberModel portasSpModel;
    private SpinnerNumberModel cilindradasSpModel;
    private SpinnerNumberModel caucaoSpModel;
    private SpinnerNumberModel valorDiarioSpModel;
    private DefaultTableModel tblModelCarro;
    private DefaultTableColumnModel tblColumnModelCarro;
    private DefaultTableModel tblModelMoto;
    private DefaultTableColumnModel tblColumnModelMoto;
                    
    
    /**
     * Creates new form LocadoraAdmVeiculos
     */
    public LocadoraAdmVeiculos() {
        initComponents();      
       // extraConfigs();
        
       // System.out.println(locadoraAtual);
       addWindowListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbVeiculo = new javax.swing.JTabbedPane();
        pnConteudo2 = new javax.swing.JPanel();
        btnPesquisa1 = new javax.swing.JButton();
        txtPesquisa1 = new javax.swing.JTextField();
        scrlTblVeiculo = new javax.swing.JScrollPane();
        tblCarro = new javax.swing.JTable();
        btnExcluir2 = new javax.swing.JButton();
        pnRadio1 = new javax.swing.JPanel();
        rdId1 = new javax.swing.JRadioButton();
        rdPlaca1 = new javax.swing.JRadioButton();
        rdModelo1 = new javax.swing.JRadioButton();
        rdMarca1 = new javax.swing.JRadioButton();
        rdTipo1 = new javax.swing.JRadioButton();
        rdAno1 = new javax.swing.JRadioButton();
        rdCor1 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMoto = new javax.swing.JTable();
        btnExcluir1 = new javax.swing.JButton();
        btnPesquisa2 = new javax.swing.JButton();
        txtPesquisa2 = new javax.swing.JTextField();
        pnRadio2 = new javax.swing.JPanel();
        rdId2 = new javax.swing.JRadioButton();
        rdPlaca2 = new javax.swing.JRadioButton();
        rdModelo2 = new javax.swing.JRadioButton();
        rdMarca2 = new javax.swing.JRadioButton();
        rdTipo2 = new javax.swing.JRadioButton();
        rdAno2 = new javax.swing.JRadioButton();
        rdCor2 = new javax.swing.JRadioButton();
        btnEdicao1 = new javax.swing.JButton();
        btnEdicao2 = new javax.swing.JButton();
        pnConteudo = new javax.swing.JPanel();
        pnCampos = new javax.swing.JPanel();
        lblTipo = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        lblModelo = new javax.swing.JLabel();
        lblCor = new javax.swing.JLabel();
        lblCombustivel = new javax.swing.JLabel();
        lblAno = new javax.swing.JLabel();
        lblKm = new javax.swing.JLabel();
        lblPlaca = new javax.swing.JLabel();
        lblCaucao = new javax.swing.JLabel();
        lblValorDiario = new javax.swing.JLabel();
        lblMotor = new javax.swing.JLabel();
        txtTipo = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        txtPlaca = new javax.swing.JTextField();
        txtCombustivel = new javax.swing.JTextField();
        txtMotor = new javax.swing.JTextField();
        txtCor = new javax.swing.JTextField();
        txtModelo = new javax.swing.JTextField();
        rdCarro = new javax.swing.JRadioButton();
        rdMoto = new javax.swing.JRadioButton();
        pnCarro = new javax.swing.JPanel();
        lblCavalos = new javax.swing.JLabel();
        spCavalos = new javax.swing.JSpinner();
        lblPortas = new javax.swing.JLabel();
        spPortas = new javax.swing.JSpinner();
        spAno = new javax.swing.JSpinner();
        pnMoto = new javax.swing.JPanel();
        lblCilindradas = new javax.swing.JLabel();
        spCilindradas = new javax.swing.JSpinner();
        btnCad = new javax.swing.JButton();
        spValorDiario = new javax.swing.JSpinner();
        spKm = new javax.swing.JSpinner();
        lblKmDesc = new javax.swing.JLabel();
        spCaucao = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOpcoes = new javax.swing.JMenu();
        mnLang = new javax.swing.JMenu();
        mniPortugues = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniIngles = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnTema = new javax.swing.JMenu();
        mniLight = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniDark = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FastVehicles | Gerenciar Veículos");

        tbVeiculo.setToolTipText("Todos os veículos desta locadora");

        btnPesquisa1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa1.setToolTipText("Clique para pesquisar");
        btnPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisa1ActionPerformed(evt);
            }
        });

        txtPesquisa1.setToolTipText("Campo de pesquisa");
        txtPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisa1ActionPerformed(evt);
            }
        });

        tblCarro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCarro.setToolTipText("Tabela de carros");
        scrlTblVeiculo.setViewportView(tblCarro);

        btnExcluir2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnExcluir2.setText("Excluir");
        btnExcluir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluir2ActionPerformed(evt);
            }
        });

        rdId1.setText("id");
        rdId1.setToolTipText("Pesquise por Id");

        rdPlaca1.setText("placa");
        rdPlaca1.setToolTipText("Pesquise por cpf");
        rdPlaca1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdPlaca1ActionPerformed(evt);
            }
        });

        rdModelo1.setText("modelo");
        rdModelo1.setToolTipText("Pesquise por rg");

        rdMarca1.setText("marca");
        rdMarca1.setToolTipText("Pesquise por email");

        rdTipo1.setText("tipo");
        rdTipo1.setToolTipText("Pesquise por cnh");

        rdAno1.setText("ano");
        rdAno1.setToolTipText("Pesquise por telefone");
        rdAno1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdAno1ActionPerformed(evt);
            }
        });

        rdCor1.setText("cor");
        rdCor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCor1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnRadio1Layout = new javax.swing.GroupLayout(pnRadio1);
        pnRadio1.setLayout(pnRadio1Layout);
        pnRadio1Layout.setHorizontalGroup(
            pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio1Layout.createSequentialGroup()
                .addComponent(rdId1)
                .addGap(18, 18, 18)
                .addComponent(rdPlaca1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdCor1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdModelo1)
                .addGap(18, 18, 18)
                .addComponent(rdTipo1)
                .addGap(18, 18, 18)
                .addComponent(rdMarca1)
                .addGap(18, 18, 18)
                .addComponent(rdAno1)
                .addGap(69, 69, 69))
        );
        pnRadio1Layout.setVerticalGroup(
            pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId1)
                    .addComponent(rdPlaca1)
                    .addComponent(rdModelo1)
                    .addComponent(rdMarca1)
                    .addComponent(rdTipo1)
                    .addComponent(rdAno1)
                    .addComponent(rdCor1))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        tblMoto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMoto.setToolTipText("Tabela de motos");
        jScrollPane2.setViewportView(tblMoto);

        btnExcluir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnExcluir1.setText("Excluir");
        btnExcluir1.setToolTipText("Deletar carro, 1 por vez");
        btnExcluir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluir1ActionPerformed(evt);
            }
        });

        btnPesquisa2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa2.setToolTipText("Clique para pesquisar");
        btnPesquisa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisa2ActionPerformed(evt);
            }
        });

        txtPesquisa2.setToolTipText("Campo de pesquisa");
        txtPesquisa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisa2ActionPerformed(evt);
            }
        });

        rdId2.setText("id");
        rdId2.setToolTipText("Pesquise por Id");

        rdPlaca2.setText("placa");
        rdPlaca2.setToolTipText("Pesquise por cpf");
        rdPlaca2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdPlaca2ActionPerformed(evt);
            }
        });

        rdModelo2.setText("modelo");
        rdModelo2.setToolTipText("Pesquise por rg");

        rdMarca2.setText("marca");
        rdMarca2.setToolTipText("Pesquise por email");

        rdTipo2.setText("tipo");
        rdTipo2.setToolTipText("Pesquise por cnh");

        rdAno2.setText("ano");
        rdAno2.setToolTipText("Pesquise por telefone");

        rdCor2.setText("cor");
        rdCor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCor2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnRadio2Layout = new javax.swing.GroupLayout(pnRadio2);
        pnRadio2.setLayout(pnRadio2Layout);
        pnRadio2Layout.setHorizontalGroup(
            pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio2Layout.createSequentialGroup()
                .addComponent(rdId2)
                .addGap(18, 18, 18)
                .addComponent(rdPlaca2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdCor2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdModelo2)
                .addGap(18, 18, 18)
                .addComponent(rdTipo2)
                .addGap(18, 18, 18)
                .addComponent(rdMarca2)
                .addGap(18, 18, 18)
                .addComponent(rdAno2)
                .addGap(69, 69, 69))
        );
        pnRadio2Layout.setVerticalGroup(
            pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId2)
                    .addComponent(rdPlaca2)
                    .addComponent(rdModelo2)
                    .addComponent(rdMarca2)
                    .addComponent(rdTipo2)
                    .addComponent(rdAno2)
                    .addComponent(rdCor2))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnEdicao1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnEdicao1.setText("Editar");
        btnEdicao1.setToolTipText("Edite um carro");
        btnEdicao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdicao1ActionPerformed(evt);
            }
        });

        btnEdicao2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnEdicao2.setText("Editar");
        btnEdicao2.setToolTipText("Edite um carro");
        btnEdicao2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdicao2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnConteudo2Layout = new javax.swing.GroupLayout(pnConteudo2);
        pnConteudo2.setLayout(pnConteudo2Layout);
        pnConteudo2Layout.setHorizontalGroup(
            pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(btnPesquisa1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addComponent(txtPesquisa1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                        .addGap(324, 324, 324))
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addComponent(pnRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEdicao2)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluir2))
                    .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnConteudo2Layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnConteudo2Layout.createSequentialGroup()
                                    .addComponent(btnEdicao1)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnExcluir1))
                                .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnConteudo2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1025, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnConteudo2Layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(btnPesquisa2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(pnRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPesquisa2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnConteudo2Layout.setVerticalGroup(
            pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPesquisa1)
                    .addComponent(txtPesquisa1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluir1)
                    .addComponent(btnEdicao1))
                .addGap(60, 60, 60)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPesquisa2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisa2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluir2)
                    .addComponent(btnEdicao2))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        tbVeiculo.addTab("Todos", pnConteudo2);

        lblTipo.setText("Tipo");
        lblTipo.setToolTipText("");

        lblMarca.setText("Marca");

        lblModelo.setText("Modelo");

        lblCor.setText("Cor");

        lblCombustivel.setText("Combustível");

        lblAno.setText("Ano");

        lblKm.setText("Quilometragem");

        lblPlaca.setText("Placa");

        lblCaucao.setText("Caução R$");

        lblValorDiario.setText("Valor Diário R$");

        lblMotor.setText("Motor");

        txtTipo.setToolTipText("Tipo do veículo");
        txtTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipoActionPerformed(evt);
            }
        });

        txtMarca.setToolTipText("Marca do veículo");

        txtPlaca.setToolTipText("Placa do veículo");

        txtCombustivel.setToolTipText("Combustível do veículo");

        txtMotor.setToolTipText("Motor do veículo");

        txtCor.setToolTipText("Cor do veículo");

        txtModelo.setToolTipText("Modelo do veículo");

        rdCarro.setText("Carro");
        rdCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCarroActionPerformed(evt);
            }
        });

        rdMoto.setText("Moto");
        rdMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMotoActionPerformed(evt);
            }
        });

        lblCavalos.setText("Cavalos");

        spCavalos.setToolTipText("Cavalos do carro");

        lblPortas.setText("Portas");

        spPortas.setToolTipText("número de portas do carro");

        javax.swing.GroupLayout pnCarroLayout = new javax.swing.GroupLayout(pnCarro);
        pnCarro.setLayout(pnCarroLayout);
        pnCarroLayout.setHorizontalGroup(
            pnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCarroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnCarroLayout.createSequentialGroup()
                        .addComponent(lblCavalos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spCavalos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnCarroLayout.createSequentialGroup()
                        .addComponent(lblPortas)
                        .addGap(18, 18, 18)
                        .addComponent(spPortas, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        pnCarroLayout.setVerticalGroup(
            pnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCarroLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCavalos)
                    .addComponent(spCavalos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPortas)
                    .addComponent(spPortas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        spAno.setToolTipText("Ano do veículo");

        lblCilindradas.setText("Cilindradas");

        spCilindradas.setToolTipText("Cilindradas da moto");

        javax.swing.GroupLayout pnMotoLayout = new javax.swing.GroupLayout(pnMoto);
        pnMoto.setLayout(pnMotoLayout);
        pnMotoLayout.setHorizontalGroup(
            pnMotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCilindradas)
                .addGap(41, 41, 41)
                .addComponent(spCilindradas, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        pnMotoLayout.setVerticalGroup(
            pnMotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMotoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnMotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCilindradas)
                    .addComponent(spCilindradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnCad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/signup.png"))); // NOI18N
        btnCad.setText("Cadastrar");
        btnCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadActionPerformed(evt);
            }
        });

        spValorDiario.setToolTipText("Valor Diário do veículo");

        spKm.setToolTipText("Quilometragem do veículo");

        lblKmDesc.setText("Km");

        spCaucao.setToolTipText("Caução do veículo");

        javax.swing.GroupLayout pnCamposLayout = new javax.swing.GroupLayout(pnCampos);
        pnCampos.setLayout(pnCamposLayout);
        pnCamposLayout.setHorizontalGroup(
            pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                        .addComponent(pnCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(pnMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                        .addComponent(lblPlaca)
                        .addGap(30, 30, 30)
                        .addComponent(txtPlaca))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMarca)
                            .addComponent(lblTipo)
                            .addComponent(lblModelo)
                            .addComponent(lblCor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtModelo)
                            .addGroup(pnCamposLayout.createSequentialGroup()
                                .addComponent(txtCor, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE))
                            .addComponent(txtTipo)
                            .addComponent(txtMarca)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnCamposLayout.createSequentialGroup()
                                .addComponent(rdCarro)
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblValorDiario, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                    .addComponent(lblCaucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCamposLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(rdMoto))
                            .addGroup(pnCamposLayout.createSequentialGroup()
                                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spCaucao, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spValorDiario, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCombustivel)
                                    .addComponent(lblAno))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCombustivel, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spAno, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                                .addComponent(lblKm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spKm, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblKmDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCamposLayout.createSequentialGroup()
                                .addComponent(lblMotor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMotor, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
            .addGroup(pnCamposLayout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(btnCad)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnCamposLayout.setVerticalGroup(
            pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCamposLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMarca)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelo)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCor)
                    .addComponent(txtCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCombustivel)
                    .addComponent(txtCombustivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAno)
                    .addComponent(spAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKm)
                    .addComponent(spKm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKmDesc))
                .addGap(9, 9, 9)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlaca)
                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaucao)
                    .addComponent(spCaucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValorDiario)
                    .addComponent(spValorDiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMotor)
                    .addComponent(txtMotor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdCarro)
                    .addComponent(rdMoto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnMoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnCarro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(btnCad)
                .addGap(60, 60, 60))
        );

        javax.swing.GroupLayout pnConteudoLayout = new javax.swing.GroupLayout(pnConteudo);
        pnConteudo.setLayout(pnConteudoLayout);
        pnConteudoLayout.setHorizontalGroup(
            pnConteudoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(558, Short.MAX_VALUE))
        );
        pnConteudoLayout.setVerticalGroup(
            pnConteudoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(328, Short.MAX_VALUE))
        );

        tbVeiculo.addTab("Cadastro", pnConteudo);

        jScrollPane1.setViewportView(tbVeiculo);

        mnOpcoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        mnOpcoes.setText("Opções");
        mnOpcoes.setToolTipText("");

        mnLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lang.png"))); // NOI18N
        mnLang.setText("Linguagem");

        mniPortugues.setSelected(true);
        mniPortugues.setText("Português");
        mniPortugues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazil.png"))); // NOI18N
        mniPortugues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPortuguesActionPerformed(evt);
            }
        });
        mnLang.add(mniPortugues);
        mnLang.add(jSeparator1);

        mniIngles.setSelected(true);
        mniIngles.setText("Inglês");
        mniIngles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usa.png"))); // NOI18N
        mniIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInglesActionPerformed(evt);
            }
        });
        mnLang.add(mniIngles);

        mnOpcoes.add(mnLang);
        mnOpcoes.add(jSeparator3);

        mnTema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/themes.png"))); // NOI18N
        mnTema.setText("Tema");

        mniLight.setSelected(true);
        mniLight.setText("Light");
        mniLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sun.png"))); // NOI18N
        mniLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLightActionPerformed(evt);
            }
        });
        mnTema.add(mniLight);
        mnTema.add(jSeparator4);

        mniDark.setSelected(true);
        mniDark.setText("Dark");
        mniDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/moon.png"))); // NOI18N
        mniDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDarkActionPerformed(evt);
            }
        });
        mnTema.add(mniDark);

        mnOpcoes.add(mnTema);

        jMenuBar1.add(mnOpcoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTipoActionPerformed

    private void rdCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCarroActionPerformed
        // TODO add your handling code here:
        pnCarro.setVisible(true);
        pnMoto.setVisible(false);
    }//GEN-LAST:event_rdCarroActionPerformed

    private void rdMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMotoActionPerformed
        // TODO add your handling code here:
        pnMoto.setVisible(true);
        pnCarro.setVisible(false);
    }//GEN-LAST:event_rdMotoActionPerformed

    
    private void btnCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadActionPerformed
        if(!isEmpty(txtTipo)) {
           if(!isEmpty(txtMarca)) {
               if(!isEmpty(txtModelo)) {
                   if(!isEmpty(txtCombustivel)) {
                       if(!isEmpty(txtCor)) {
                            if(!isEmpty(txtPlaca)) {
                                if(!isEmpty(txtMotor)) {
                                   
                                    if(rdCarro.isSelected()) {
                          
                                        //cria objeto carro
                                        Carro carro = new Carro(
                                            txtTipo.getText().trim(), txtMarca.getText().trim(),
                                            txtModelo.getText().trim(), txtCor.getText().trim(), 
                                            txtCombustivel.getText().trim(), anoSpModel.getNumber().intValue(),
                                            kmSpModel.getNumber().longValue(), txtPlaca.getText().trim(),
                                            caucaoSpModel.getNumber().doubleValue(),
                                            valorDiarioSpModel.getNumber().doubleValue(),
                                            txtMotor.getText().trim(), cavalosSpModel.getNumber().intValue(),
                                            portasSpModel.getNumber().intValue(), locadoraAtual );
                                        
                                        carroDao.save(carro); //salva carro no bd
                                             
                                        updateCarInList(); //ATUALIZA LISTA DE CARROS
                                        updateTblCarro(); //atualiza tabelas 
                                        
                                        //mensagem de cadastro com sucesso
                                         URL url = getClass().getResource("/images/success.png");
                                         ImageIcon sucessIcon = new ImageIcon(url);
                                         JOptionPane.showMessageDialog(this, "Carro cadastrado com sucesso!", 
                                             "Veículo cadastrado!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                       
                                    }else { //se for moto
                                        
                                        //cria objeto carro
                                        Moto moto = new Moto(
                                            txtTipo.getText().trim(), txtMarca.getText().trim(),
                                            txtModelo.getText().trim(), txtCor.getText().trim(), 
                                            txtCombustivel.getText().trim(), anoSpModel.getNumber().intValue(),
                                            kmSpModel.getNumber().longValue(), txtPlaca.getText().trim(),
                                            caucaoSpModel.getNumber().doubleValue(),
                                            valorDiarioSpModel.getNumber().doubleValue(),
                                            txtMotor.getText().trim(), 
                                            cilindradasSpModel.getNumber().intValue(), locadoraAtual);
                                        
                                        motoDao.save(moto); //salva carro no bd
                                            
                                        updateMotoInList();
                                        updateTblMoto(); //atualiza tabela
                                        
                                        //mensagem de cadastro com sucesso
                                         URL url = getClass().getResource("/images/success.png");
                                         ImageIcon sucessIcon = new ImageIcon(url);
                                         JOptionPane.showMessageDialog(this, "Moto cadastrada com sucesso!", 
                                             "Veículo cadastrado!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                                        
                                    }
                                    
                                    resetaCampos();//resta os dados - reset data
                                }else {
                                     JOptionPane.showMessageDialog(this, "O campo \'Motor\' está vazio", "Motor vazio", 
                                          JOptionPane.ERROR_MESSAGE);
                                 }
                             }else {
                                 JOptionPane.showMessageDialog(this, "O campo \'Placa\' está vazio", "Placa vazia", 
                                      JOptionPane.ERROR_MESSAGE);
                             }
                        }else {
                            JOptionPane.showMessageDialog(this, "O campo \'Cor\' está vazio", "Cor vazia", 
                                JOptionPane.ERROR_MESSAGE);
                        }
                        
                    }else {
                        JOptionPane.showMessageDialog(this, "O campo \'Combustível\' está vazio", "Combustível vazio", 
                             JOptionPane.ERROR_MESSAGE);
                    }
                }else {
                    JOptionPane.showMessageDialog(this, "O campo \'Modelo\' está vazio", "Modelo vazio", 
                         JOptionPane.ERROR_MESSAGE);
                }
               
           }else {
               JOptionPane.showMessageDialog(this, "O campo \'Marca\' está vazio", "Marca vazia", 
                    JOptionPane.ERROR_MESSAGE);
           }
           
        }else{
            JOptionPane.showMessageDialog(this, "O campo \'Tipo\' está vazio", "Tipo vazio", 
                    JOptionPane.ERROR_MESSAGE);
        }
            
    }//GEN-LAST:event_btnCadActionPerformed

    private void rdCor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCor2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCor2ActionPerformed

    private void rdPlaca2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdPlaca2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdPlaca2ActionPerformed

    private void txtPesquisa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisa2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisa2ActionPerformed

    private void btnPesquisa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisa2ActionPerformed
        tblMoto.clearSelection(); //limpa selecoes - clear selections

        boolean found = false;
        String type = "Id"; //primeiro tipo id - first type id
        int column = 0; //coluna do id - id column
        String searchText = txtPesquisa2.getText(); //pega texto de pesquisa

        //edita a coluna e tipo de dado - edit column and data type
        if(rdTipo2.isSelected()) {
            column = 1;
            type = "Tipo";
        }else if(rdMarca2.isSelected()) {
            column = 2;
            type = "Marca";
        }else if(rdModelo2.isSelected()) {
            column = 3;
            type = "Modelo";
        }else if(rdCor2.isSelected()) {
            column = 4;
            type = "Cor";
        }else if(rdPlaca2.isSelected()) {
            column = 5;
            type = "Placa";
        }else if(rdAno2.isSelected()) {
            column = 6;
            type = "Ano";
        }

        for(int i = 0; i < tblModelMoto.getRowCount(); ++i) { //percorre tabela
            if(!rdId2.isSelected()) { //se n for rdId q esta selecionaddo
                String nome = String.valueOf(tblModelMoto.getValueAt(i, column)).trim();

                if(nome.toLowerCase().contains(searchText)
                    || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                    found = true;
                    tblMoto.addRowSelectionInterval(i, i); //seleciona linha
                }
            }else {
                if(searchText.equals(String.valueOf(
                    tblModelMoto.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                    found = true;
                    tblMoto.addRowSelectionInterval(i, i); //seleciona linha
                }   
            }
        }

        if(!found) { //se n foi encontrado
            JOptionPane.showMessageDialog(this, type + " { " + searchText + " } de moto não encontrado !",
                type + " Não Encontrado", JOptionPane.ERROR_MESSAGE);
        }

        //use se precisar - take it if it is nedded
        //        if(rdId.isSelected()) {
            //            long id = Long.parseLong(txtPesquisa.getText()); //pega id de pesquisa
            //
            //            for(int i = 0; i < tblModel.getRowCount(); ++i) { //percorre tabela
                //                if(id == (Long)tblModel.getValueAt(i, 0)) { //procura id na linha i coluna 0 de ids
                    //                    found = true;
                    //                    tblCliente.setRowSelectionInterval(i, i); //seleciona linha
                    //                }
                //            }
            //
            //            if(!found) { //se n foi encontrado
                //                JOptionPane.showMessageDialog(this, "Id { " + id + " } não encontrado!",
                    //                    "Id Não Encontrado", JOptionPane.ERROR_MESSAGE);
                //            }
            //        }
    }//GEN-LAST:event_btnPesquisa2ActionPerformed

    private void btnExcluir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluir1ActionPerformed
        int row = tblCarro.getSelectedRow();
        if(row != -1) {
            //int rowCountWhenSel = tblModelCarro.getRowCount(); //para resolver um problema mais tarde - to solve a problem late
            Long carroId = (Long)(tblModelCarro.getValueAt(row, 0)); //pega id - get id
            tblModelCarro.removeRow(row); //remove linha selecionada - remove selected row
            locadoraDao.deleteCarro(carroId); //deleta carro no bd - delete car on db
            
            //remove carro da lista de veiculos da locadora - remove car from vehicle list
            List<Veiculo> veiculos = locadoraAtual.getVeiculos();
            for(int i = 0; i < veiculos.size(); ++i) {
                if(veiculos.get(i) instanceof Carro) {
                    if(veiculos.get(i).getId() == carroId) {
                        veiculos.remove(i);
                    }
                }
            }
            
            locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
            //elimina clientes que usavam o veiculo deletado e mais nenhum outro
            //pega listas
            List<Cliente> clientes = clienteDao.getAllByLocadora(locadoraAtual); //pega clientes da locadora
            List<Locacao> locacoes = locCarroDao.getAllByLocadora(locadoraAtual); //pega locacoes da locadora
            locacoes.addAll(locMotoDao.getAllByLocadora(locadoraAtual));
            
            int count = 0; //ajuda a eliminar clientes que usavam o carro deletado e mais nenhum outro
            for(Cliente cliente: clientes) {
                for(Locacao loc: locacoes) {
                    if(cliente.getId() == loc.getCliente().getId()) { //se cliente esta na locacao
                        break; //fecha loop
                    }
                    ++count; //incrementa 
                }
                
                if(count == locacoes.size()) { //se contador chega ao tamanho das locacoes
                    clientes.remove(cliente); //elimina da lista, pq n tem locacao
                    locadoraDao.deleteCliente(cliente.getId()); //deleta no bd
                }
            }
            //finaliza eliminacao
        
            //mensagem de exclusap com sucesso
             URL url = getClass().getResource("/images/success.png");
             ImageIcon sucessIcon = new ImageIcon(url);
             JOptionPane.showMessageDialog(this, "Carro excluído com sucesso!", 
                 "Carro Excluído!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
        }else { //se a linha nao esta selecionada - if line is not selected
            JOptionPane.showMessageDialog(this, "Linha não selecionada",
                "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluir1ActionPerformed

    private void rdCor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCor1ActionPerformed

    private void rdPlaca1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdPlaca1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdPlaca1ActionPerformed

    private void btnExcluir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluir2ActionPerformed
        int row = tblMoto.getSelectedRow();
        if(row != -1) {
            //int rowCountWhenSel = tblModelCarro.getRowCount(); //para resolver um problema mais tarde - to solve a problem late
            Long motoId = (Long)(tblModelMoto.getValueAt(row, 0)); //pega id - get id
            tblModelMoto.removeRow(row); //remove linha selecionada - remove selected row
            locadoraDao.deleteMoto(motoId); //deleta moto no bd - delete bike on db
            
            //remove moto da lista de veiculos da locadora - remove bike from vehicle list
            List<Veiculo> veiculos = locadoraAtual.getVeiculos();
            for(int i = 0; i < veiculos.size(); ++i) {
                if(veiculos.get(i) instanceof Moto) {
                    if(veiculos.get(i).getId() == motoId) {
                        veiculos.remove(i);
                    }
                }
            }
            
            locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
            //elimina clientes que usavam o veiculo deletado e mais nenhum outro
            //pega listas
            List<Cliente> clientes = clienteDao.getAllByLocadora(locadoraAtual); //pega clientes da locadora
            List<Locacao> locacoes = locMotoDao.getAllByLocadora(locadoraAtual); //pega locacoes da locadora
            locacoes.addAll(locCarroDao.getAllByLocadora(locadoraAtual));
            
            int count = 0; //ajuda a eliminar clientes que usavam o carro deletado e mais nenhum outro
            for(Cliente cliente: clientes) {
                for(Locacao loc: locacoes) {
                    if(cliente.getId() == loc.getCliente().getId()) { //se cliente esta na locacao
                        break; //fecha loop
                    }
                    ++count; //incrementa 
                }
                
                if(count == locacoes.size()) { //se contador chega ao tamanho das locacoes
                    clientes.remove(cliente); //elimina da lista, pq n tem locacao
                    locadoraDao.deleteCliente(cliente.getId()); //deleta no bd
                }
            }
            //finaliza eliminacao
            
            //mensagem de exclusap com sucesso
             URL url = getClass().getResource("/images/success.png");
             ImageIcon sucessIcon = new ImageIcon(url);
             JOptionPane.showMessageDialog(this, "Moto excluída com sucesso!", 
                 "Moto Excluída!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
        }else { //se a linha nao esta selecionada - if line is not selected
            JOptionPane.showMessageDialog(this, "Linha não selecionada",
                "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluir2ActionPerformed

    private void txtPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisa1ActionPerformed

    private void btnPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisa1ActionPerformed
        tblCarro.clearSelection(); //limpa selecoes - clear selections

        boolean found = false;
        String type = "Id"; //primeiro tipo id - first type id
        int column = 0; //coluna do id - id column
        String searchText = txtPesquisa1.getText(); //pega texto de pesquisa

        //edita a coluna e tipo de dado - edit column and data type
        if(rdTipo1.isSelected()) {
            column = 1;
            type = "Tipo";
        }else if(rdMarca1.isSelected()) {
            column = 2;
            type = "Marca";
        }else if(rdModelo1.isSelected()) {
            column = 3;
            type = "Modelo";
        }else if(rdCor1.isSelected()) {
            column = 4;
            type = "Cor";
        }else if(rdPlaca1.isSelected()) {
            column = 5;
            type = "Placa";
        }else if(rdAno1.isSelected()) {
            column = 6;
            type = "Ano";
        }

        for(int i = 0; i < tblModelCarro.getRowCount(); ++i) { //percorre tabela
            if(!rdId1.isSelected()) { //se n for rdId q esta selecionaddo
                String nome = String.valueOf(tblModelCarro.getValueAt(i, column)).trim();

                if(nome.toLowerCase().contains(searchText)
                    || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                    found = true;
                    tblCarro.addRowSelectionInterval(i, i); //seleciona linha
                }
            }else {
                if(searchText.equals(String.valueOf(
                    tblModelCarro.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                    found = true;
                    tblCarro.addRowSelectionInterval(i, i); //seleciona linha
                }   
            }
        }

        if(!found) { //se n foi encontrado
            JOptionPane.showMessageDialog(this, type + " { " + searchText + " } de carro não encontrado !",
                type + " Não Encontrado", JOptionPane.ERROR_MESSAGE);
        }

        //use se precisar - take it if it is nedded
        //        if(rdId.isSelected()) {
            //            long id = Long.parseLong(txtPesquisa.getText()); //pega id de pesquisa
            //
            //            for(int i = 0; i < tblModel.getRowCount(); ++i) { //percorre tabela
                //                if(id == (Long)tblModel.getValueAt(i, 0)) { //procura id na linha i coluna 0 de ids
                    //                    found = true;
                    //                    tblCliente.setRowSelectionInterval(i, i); //seleciona linha
                    //                }
                //            }
            //
            //            if(!found) { //se n foi encontrado
                //                JOptionPane.showMessageDialog(this, "Id { " + id + " } não encontrado!",
                    //                    "Id Não Encontrado", JOptionPane.ERROR_MESSAGE);
                //            }
            //        }
    }//GEN-LAST:event_btnPesquisa1ActionPerformed

    private void rdAno1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdAno1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdAno1ActionPerformed

    private void btnEdicao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdicao1ActionPerformed
        int row = tblCarro.getSelectedRow();
        if(row != -1) {
            if(locacaoEditCarro == null) { //se a tela nao foi iniciada - if screen was not init
                locacaoEditCarro = new LocadoraEditCarro();
                locacaoEditCarro.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(locacaoEditCarro)) { 
                           locacaoEditCarro = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });
                
                Carro carro = null;
                for(Veiculo v: locadoraAtual.getVeiculos()) {
                    if(v instanceof Carro && v.getId() 
                        == ((Long) tblCarro.getValueAt(row, 0)) ) { //se for carro e tiver id da linha da tabela de motos selecionada
                        carro = (Carro)v; //pega carro da linha selecionada da tab
                    }
                }
                
                locacaoEditCarro.addLocAdmVeiculos(this);
                locacaoEditCarro.addLocadora(locadoraAtual);
                locacaoEditCarro.addCarro(carro); //adiciona locadora para operacoes necessarias - add locator to do all ops
                locacaoEditCarro.setVisible(true);

            }else if(locacaoEditCarro.getExtendedState() != NORMAL) {
                locacaoEditCarro.setExtendedState(NORMAL);
            }else {
                locacaoEditCarro.requestFocus();
            }
        }else {
            JOptionPane.showMessageDialog(this, "Selecione a linha do carro que deseja editar",
                "Sem seleção!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnEdicao1ActionPerformed

    private void btnEdicao2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdicao2ActionPerformed
        int row = tblMoto.getSelectedRow();
        if(row != -1) {
            if(locacaoEditMoto == null) { //se a tela nao foi iniciada - if screen was not init
                locacaoEditMoto = new LocadoraEditMoto();
                locacaoEditMoto.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(locacaoEditMoto)) { 
                           locacaoEditMoto = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });

                
                Moto moto = null;
                for(Veiculo v: locadoraAtual.getVeiculos()) {
                    if(v instanceof Moto && v.getId() 
                        == ((Long) tblMoto.getValueAt(row, 0)) ) { //se for moto e tiver id da linha da tabela de motos selecionada
                        moto = (Moto)v; //pega moto da linha selecionada da tab
                    }
                }
                
                locacaoEditMoto.addLocAdmVeiculos(this);
                locacaoEditMoto.addLocadora(locadoraAtual);
                locacaoEditMoto.addMoto(moto); //adiciona locadora para operacoes necessarias - add locator to do all ops
                locacaoEditMoto.setVisible(true);

            }else if(locacaoEditMoto.getExtendedState() != NORMAL) {
                locacaoEditMoto.setExtendedState(NORMAL);
            }else {
                locacaoEditMoto.requestFocus();
            }
        }else {
            JOptionPane.showMessageDialog(this, "Selecione a linha da moto que deseja editar",
                "Sem seleção!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEdicao2ActionPerformed

    private void mniLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLightActionPerformed

        //restaura frame para o padrao
        UIManager.put( "control", null);
        UIManager.put( "info", null);
        UIManager.put( "nimbusBase", null);
        UIManager.put( "nimbusAlertYellow", null);
        UIManager.put( "nimbusDisabledText", null);
        UIManager.put( "nimbusFocus", null);
        UIManager.put( "nimbusGreen", null);
        UIManager.put( "nimbusInfoBlue", null);
        UIManager.put( "nimbusLightBackground", null);
        UIManager.put( "nimbusOrange", null);
        UIManager.put( "nimbusRed", null);
        UIManager.put( "nimbusSelectedText", null);
        UIManager.put( "nimbusSelectionBackground", null);
        UIManager.put( "text", null);

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "light";

            //toogle menu
            mniLight.setSelected(true);
            mniDark.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = Color.BLACK;
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            
            InstanceFrame.updateAllFrames(); //atualiza os frames

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

    }//GEN-LAST:event_mniLightActionPerformed

    private void mniDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDarkActionPerformed

        //coloca padroes para o dark mode
        UIManager.put( "control", new Color( 128, 128, 128) );
        UIManager.put( "info", new Color(128,128,128) );
        UIManager.put( "nimbusBase", new Color( 18, 30, 49) );
        UIManager.put( "nimbusAlertYellow", new Color( 248, 187, 0) );
        UIManager.put( "nimbusDisabledText", new Color( 128, 128, 128) );
        UIManager.put( "nimbusFocus", new Color(115,164,209) );
        UIManager.put( "nimbusGreen", new Color(176,179,50) );
        UIManager.put( "nimbusInfoBlue", new Color( 66, 139, 221) );
        UIManager.put( "nimbusLightBackground", new Color( 18, 30, 49) );
        UIManager.put( "nimbusOrange", new Color(191,98,4) );
        UIManager.put( "nimbusRed", new Color(169,46,34) );
        UIManager.put( "nimbusSelectedText", new Color( 255, 255, 255) );
        UIManager.put( "nimbusSelectionBackground", new Color( 104, 93, 156) );
        UIManager.put( "text", new Color( 230, 230, 230) );

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "dark";

            //toogle menu
            mniDark.setSelected(true);
            mniLight.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
        
            InstanceFrame.updateAllFrames(); //atualiza os frames

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_mniDarkActionPerformed

    private void mniPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPortuguesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.PORTUGUES; //coloca idioma como portugues no IdiomaApp

        //toggle lang
        mniPortugues.setSelected(true);//muda para portugues
        mniIngles.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniPortuguesActionPerformed

    private void mniInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInglesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.INGLES; //coloca idioma como ingles no IdiomaApp

        //toggle lang
        mniIngles.setSelected(true);  //muda para ingles
        mniPortugues.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniInglesActionPerformed
    
    private void resetaCampos() {
        //resetas txts
        txtTipo.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtMarca.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtModelo.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtCor.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtCombustivel.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtPlaca.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtMotor.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        
        //reseta as dicas
        txtTipo.addFocusListener(new TipNoFocus(txtTipo, 
                "Ex.: Compacto", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtMarca.addFocusListener(new TipNoFocus(txtMarca, 
                "Ex.: Hyundai",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtModelo.addFocusListener(new TipNoFocus(txtModelo, 
                "Ex.: HB20X",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtCor.addFocusListener(new TipNoFocus(txtCor, 
                "Ex.: Prata", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtCombustivel.addFocusListener(new TipNoFocus(txtCombustivel, 
                "Ex.: Etanol", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPlaca.addFocusListener(new TipNoFocus(txtPlaca, 
                "Ex.: CMG-3164", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtMotor.addFocusListener(new TipNoFocus(txtMotor, 
                "Ex.:  1.0 litro flex aspirado e câmbio manual",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        //reseta spinners
        anoSpModel.setValue(2022);
        kmSpModel.setValue(100);
        caucaoSpModel.setValue(200);
        valorDiarioSpModel.setValue(50);
        cavalosSpModel.setValue(50);
        portasSpModel.setValue(2);
        cilindradasSpModel.setValue(100);
    }
        
    
    public void addLocadora(Locadora loc) {
        locadoraAtual = loc;
        extraConfigs();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmVeiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmVeiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmVeiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmVeiculos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocadoraAdmVeiculos().setVisible(true);
            }
        });
    }
    

    public void extraConfigs() {
          
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }
        
        //confgs dos elementos - elements config
        lblTipo.setFont(DesignApp.fonteGeral);
        lblMarca.setFont(DesignApp.fonteGeral);
        lblModelo.setFont(DesignApp.fonteGeral);
        lblCor.setFont(DesignApp.fonteGeral);
        lblCombustivel.setFont(DesignApp.fonteGeral);
        lblAno.setFont(DesignApp.fonteGeral);
        lblKm.setFont(DesignApp.fonteGeral);
        lblKmDesc.setFont(DesignApp.fonteGeral);
        lblPlaca.setFont(DesignApp.fonteGeral);
        lblCaucao.setFont(DesignApp.fonteGeral);
        lblValorDiario.setFont(DesignApp.fonteGeral);
        lblMotor.setFont(DesignApp.fonteGeral);
        lblCavalos.setFont(DesignApp.fonteGeral);
        lblPortas.setFont(DesignApp.fonteGeral);
        lblCilindradas.setFont(DesignApp.fonteGeral);
        
        txtTipo.setFont(DesignApp.fonteGeral);
        txtMarca.setFont(DesignApp.fonteGeral);
        txtModelo.setFont(DesignApp.fonteGeral);
        txtCor.setFont(DesignApp.fonteGeral);
        txtCombustivel.setFont(DesignApp.fonteGeral);
        txtPlaca.setFont(DesignApp.fonteGeral);
        txtMotor.setFont(DesignApp.fonteGeral);
        spAno.setFont(DesignApp.fonteGeral);
        spKm.setFont(DesignApp.fonteGeral);
        spCaucao.setFont(DesignApp.fonteGeral);
        spValorDiario.setFont(DesignApp.fonteGeral);
        spCavalos.setFont(DesignApp.fonteGeral);
        spPortas.setFont(DesignApp.fonteGeral);
        spCilindradas.setFont(DesignApp.fonteGeral);
        rdMoto.setFont(DesignApp.fonteGeral);
        rdCarro.setFont(DesignApp.fonteGeral);
        btnCad.setFont(DesignApp.fonteGeral);
        btnEdicao1.setFont(DesignApp.fonteGeral);
        
        //instanciating spinner models
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        anoSpModel = new SpinnerNumberModel(currentYear, 1980, currentYear, 1);
        kmSpModel = new SpinnerNumberModel(100, 0, 1000000000, 10); 
        cavalosSpModel = new SpinnerNumberModel(50, 1, 100000, 10); 
        portasSpModel = new SpinnerNumberModel(2, 1, 100, 1); 
        cilindradasSpModel = new SpinnerNumberModel(100, 1, 100000, 10); 
        caucaoSpModel = new SpinnerNumberModel(200, 0, 10000000, 5);
        valorDiarioSpModel = new SpinnerNumberModel(50, 1, 10000000, 5);
        
        spAno.setModel(anoSpModel);
        spKm.setModel(kmSpModel);
        spCavalos.setModel(cavalosSpModel);
        spPortas.setModel(portasSpModel);
        spCilindradas.setModel(cilindradasSpModel);
        spCaucao.setModel(caucaoSpModel);
        spValorDiario.setModel(valorDiarioSpModel);
        
        txtTipo.addFocusListener(new TipNoFocus(txtTipo, 
                "Ex.: Compacto",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtMarca.addFocusListener(new TipNoFocus(txtMarca, 
                "Ex.: Hyundai",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR,0));
        txtModelo.addFocusListener(new TipNoFocus(txtModelo, 
                "Ex.: HB20X",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtCor.addFocusListener(new TipNoFocus(txtCor, 
                "Ex.: Prata", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR,0));
        txtCombustivel.addFocusListener(new TipNoFocus(txtCombustivel, 
                "Ex.: Etanol", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPlaca.addFocusListener(new TipNoFocus(txtPlaca, 
                "Ex.: CMG-3164",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtMotor.addFocusListener(new TipNoFocus(txtMotor, 
                "Ex.:  1.0 litro flex aspirado e câmbio manual",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
      
        rdCarro.setSelected(true);
        pnMoto.setVisible(false);
                
        btnGroup1.add(rdCarro);
        btnGroup1.add(rdMoto);
        
        
        //configs 2o frame
        
        //configura tabela carros - setup car table    
        tblModelCarro = new DefaultTableModel(new String[]{"Id", "Tipo", "Marca", 
            "Modelo", "Cor", "Placa", "Ano", "ValorDiário"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tblCarro.setModel(tblModelCarro);
        tblCarro.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModelCarro = ((DefaultTableColumnModel) tblCarro.getColumnModel());
        tblColumnModelCarro.getColumn(0).setPreferredWidth(30);
        tblColumnModelCarro.getColumn(1).setPreferredWidth(200);
        tblColumnModelCarro.getColumn(2).setPreferredWidth(80);
        tblColumnModelCarro.getColumn(3).setPreferredWidth(150);
        tblColumnModelCarro.getColumn(4).setPreferredWidth(70);
        tblColumnModelCarro.getColumn(5).setPreferredWidth(90);
        
        updateTblCarro(); //atualiza tabela
        System.out.println("extra " + locadoraAtual.getVeiculos());
        btnPesquisa1.setFont(DesignApp.fonteGeral);
        txtPesquisa1.setFont(DesignApp.fonteGeral);
        txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Pesquise carro pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPesquisa1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa1.doClick();
                }
            }
        });
        
        //organiza fontes - setup fontes
        rdId1.setFont(DesignApp.fonteGeral);
        rdId1.setSelected(true);
        rdPlaca1.setFont(DesignApp.fonteGeral);
        rdCor1.setFont(DesignApp.fonteGeral);
        rdModelo1.setFont(DesignApp.fonteGeral);
        rdTipo1.setFont(DesignApp.fonteGeral);
        rdMarca1.setFont(DesignApp.fonteGeral);
        rdAno1.setFont(DesignApp.fonteGeral);
        btnGroup2 = new ButtonGroup();
        btnGroup2.add(rdId1);
        btnGroup2.add(rdPlaca1);
        btnGroup2.add(rdCor1);
        btnGroup2.add(rdModelo1);
        btnGroup2.add(rdTipo1);
        btnGroup2.add(rdMarca1);
        btnGroup2.add(rdAno1);
        
        //configura tabela motos - setup bike table    
        tblModelMoto = new DefaultTableModel(new String[]{"Id", "Tipo", "Marca", 
            "Modelo", "Cor", "Placa", "Ano", "ValorDiário"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tblMoto.setModel(tblModelMoto);
        tblMoto.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModelMoto = ((DefaultTableColumnModel) tblMoto.getColumnModel());
        tblColumnModelMoto.getColumn(0).setPreferredWidth(30);
        tblColumnModelMoto.getColumn(1).setPreferredWidth(200);
        tblColumnModelMoto.getColumn(2).setPreferredWidth(80);
        tblColumnModelMoto.getColumn(3).setPreferredWidth(150);
        tblColumnModelMoto.getColumn(4).setPreferredWidth(70);
        tblColumnModelMoto.getColumn(5).setPreferredWidth(90);
        
        updateTblMoto(); //atualiza tabela
        
        btnPesquisa2.setFont(DesignApp.fonteGeral);
        txtPesquisa2.setFont(DesignApp.fonteGeral);
        txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Pesquise moto pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR,0));
        
        txtPesquisa2.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa2.doClick();
                }
            }
        });
        
        //...
        rdId2.setFont(DesignApp.fonteGeral);
        rdId2.setSelected(true);
        rdPlaca2.setFont(DesignApp.fonteGeral);
        rdCor2.setFont(DesignApp.fonteGeral);
        rdModelo2.setFont(DesignApp.fonteGeral);
        rdTipo2.setFont(DesignApp.fonteGeral);
        rdMarca2.setFont(DesignApp.fonteGeral);
        rdAno2.setFont(DesignApp.fonteGeral);
        btnGroup3 = new ButtonGroup();
        btnGroup3.add(rdId2);
        btnGroup3.add(rdPlaca2);
        btnGroup3.add(rdCor2);
        btnGroup3.add(rdModelo2);
        btnGroup3.add(rdTipo2);
        btnGroup3.add(rdMarca2);
        btnGroup3.add(rdAno2);
        
        //toogle menu
        if(DesignApp.temaAtual.equals("light")) { //coloca light como selecionado
            mniLight.setSelected(true);
            mniDark.setSelected(false);
        }else { //coloca dark
            mniLight.setSelected(false);
            mniDark.setSelected(true);
        }
        
        
                //toggle menu lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
            mniPortugues.setSelected(true); //deixa mniLight checado
            mniIngles.setSelected(false);
        }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES){
            mniIngles.setSelected(true);
            mniPortugues.setSelected(false); //deixa mniLight checado
            updateLangComponents();
        }

        
    }
    
    @Override
    public JCheckBoxMenuItem getMniDark() {
        return mniDark;
    }

    public void setMniDark(JCheckBoxMenuItem mniDark) {
        this.mniDark = mniDark;
    }
    
    @Override
    public JCheckBoxMenuItem getMniLight() {
        return mniLight;
    }

    public void setMniLight(JCheckBoxMenuItem mniLight) {
        this.mniLight = mniLight;
    }
    
    private boolean isEmpty(JComponent comp) {  
    return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR ? true: false;
    }

    public void updateCarInList() { 
        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //atualiza lista com o novo veiculo
        List<Carro> veiculosBd = carroDao.getAllByLocadora(locadoraAtual); //pega carros no bd
        List<Veiculo> veiculosLoc = locadoraAtual.getVeiculos(); //pega lista de veiculos da locadora
        veiculosLoc.add(veiculosBd.get(veiculosBd.size() -1)); //add o ultimo valor a a lista de veiculos da locadora
        
    }
    
    public void updateMotoInList() { 
        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //atualiza lista com o novo veiculo
        List<Moto> veiculosBd = motoDao.getAllByLocadora(locadoraAtual); //pega carros no bd
        List<Veiculo> veiculosLoc = locadoraAtual.getVeiculos(); //pega lista de veiculos da locadora
        veiculosLoc.add(veiculosBd.get(veiculosBd.size() -1)); //add o ultimo valor a a lista de veiculos da locadora
       
    }
    
    
    public void updateTblCarro() {
        tblModelCarro.setRowCount(0);
        
        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //add carros na tabela - add cars to table 
        for(Carro c: carroDao.getAllByLocadora(locadoraAtual)) {
            tblModelCarro.addRow(new Object[] {c.getId(),    
                c.getTipo(), c.getMarca(), c.getModelo(),
                c.getCor(), c.getPlaca(), c.getAno(),
                c.getValorDiario()});
        }

        
    }
    
    public void updateTblMoto() {
        tblModelMoto.setRowCount(0);
        
        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //add motos na tabela - add bikes to table
        for(Moto m: motoDao.getAllByLocadora(locadoraAtual)) {
            tblModelMoto.addRow(new Object[] {m.getId(),    
                m.getTipo(), m.getMarca(), m.getModelo(),
                m.getCor(), m.getPlaca(), m.getAno(),
                m.getValorDiario()});
        }
    }
    
    @Override
    public void resetaListenerCampos() {
        txtTipo.setText("");
        txtMarca.setText("");
        txtModelo.setText("");
        txtCor.setText("");
        txtCombustivel.setText("");
        txtPlaca.setText("");
        txtMotor.setText("");
        txtPesquisa1.setText("");
        txtPesquisa2.setText("");
        
        txtTipo.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtMarca.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtModelo.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtCor.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtCombustivel.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtPlaca.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtMotor.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtPesquisa1.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        txtPesquisa2.setForeground(DesignApp.FIELD_FONT_TIP_COLOR);
        
        for(FocusListener focus: txtTipo.getFocusListeners()) { //percorre listeneers
            txtTipo.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtModelo.getFocusListeners()) { //percorre listeneers
            txtModelo.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtMarca.getFocusListeners()) { //percorre listeneers
            txtMarca.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtCor.getFocusListeners()) { //percorre listeneers
            txtCor.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtCombustivel.getFocusListeners()) { //percorre listeneers
            txtCombustivel.removeFocusListener(focus);//remove focus listeners
        } 
         
        for(FocusListener focus: txtPlaca.getFocusListeners()) { //percorre listeneers
            txtPlaca.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtMotor.getFocusListeners()) { //percorre listeneers
            txtMotor.removeFocusListener(focus);//remove focus listeners
        }     
        
          for(FocusListener focus: txtPesquisa1.getFocusListeners()) { //percorre listeneers
            txtPesquisa1.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: txtPesquisa2.getFocusListeners()) { //percorre listeneers
            txtPesquisa2.removeFocusListener(focus);//remove focus listeners
        }     
             
        
        //reseta as dicas
        txtTipo.addFocusListener(new TipNoFocus(txtTipo, 
                "Ex.: Compacto", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));                  
        txtMarca.addFocusListener(new TipNoFocus(txtMarca, 
                "Ex.: Hyundai",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));              
        txtModelo.addFocusListener(new TipNoFocus(txtModelo, 
                "Ex.: HB20X",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtCor.addFocusListener(new TipNoFocus(txtCor, 
                "Ex.: Prata", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtCombustivel.addFocusListener(new TipNoFocus(txtCombustivel, 
                "Ex.: Etanol", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPlaca.addFocusListener(new TipNoFocus(txtPlaca, 
                "Ex.: CMG-3164", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtMotor.addFocusListener(new TipNoFocus(txtMotor, 
                "Ex.:  1.0 litro flex aspirado e câmbio manual",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Pesquise moto pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR,0));
        txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Pesquise carro pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCad;
    private javax.swing.JButton btnEdicao1;
    private javax.swing.JButton btnEdicao2;
    private javax.swing.JButton btnExcluir1;
    private javax.swing.JButton btnExcluir2;
    private javax.swing.JButton btnPesquisa1;
    private javax.swing.JButton btnPesquisa2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel lblAno;
    private javax.swing.JLabel lblCaucao;
    private javax.swing.JLabel lblCavalos;
    private javax.swing.JLabel lblCilindradas;
    private javax.swing.JLabel lblCombustivel;
    private javax.swing.JLabel lblCor;
    private javax.swing.JLabel lblKm;
    private javax.swing.JLabel lblKmDesc;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JLabel lblMotor;
    private javax.swing.JLabel lblPlaca;
    private javax.swing.JLabel lblPortas;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblValorDiario;
    private javax.swing.JMenu mnLang;
    private javax.swing.JMenu mnOpcoes;
    private javax.swing.JMenu mnTema;
    private javax.swing.JCheckBoxMenuItem mniDark;
    private javax.swing.JCheckBoxMenuItem mniIngles;
    private javax.swing.JCheckBoxMenuItem mniLight;
    private javax.swing.JCheckBoxMenuItem mniPortugues;
    private javax.swing.JPanel pnCampos;
    private javax.swing.JPanel pnCarro;
    private javax.swing.JPanel pnConteudo;
    private javax.swing.JPanel pnConteudo2;
    private javax.swing.JPanel pnMoto;
    private javax.swing.JPanel pnRadio1;
    private javax.swing.JPanel pnRadio2;
    private javax.swing.JRadioButton rdAno1;
    private javax.swing.JRadioButton rdAno2;
    private javax.swing.JRadioButton rdCarro;
    private javax.swing.JRadioButton rdCor1;
    private javax.swing.JRadioButton rdCor2;
    private javax.swing.JRadioButton rdId1;
    private javax.swing.JRadioButton rdId2;
    private javax.swing.JRadioButton rdMarca1;
    private javax.swing.JRadioButton rdMarca2;
    private javax.swing.JRadioButton rdModelo1;
    private javax.swing.JRadioButton rdModelo2;
    private javax.swing.JRadioButton rdMoto;
    private javax.swing.JRadioButton rdPlaca1;
    private javax.swing.JRadioButton rdPlaca2;
    private javax.swing.JRadioButton rdTipo1;
    private javax.swing.JRadioButton rdTipo2;
    private javax.swing.JScrollPane scrlTblVeiculo;
    private javax.swing.JSpinner spAno;
    private javax.swing.JSpinner spCaucao;
    private javax.swing.JSpinner spCavalos;
    private javax.swing.JSpinner spCilindradas;
    private javax.swing.JSpinner spKm;
    private javax.swing.JSpinner spPortas;
    private javax.swing.JSpinner spValorDiario;
    private javax.swing.JTabbedPane tbVeiculo;
    private javax.swing.JTable tblCarro;
    private javax.swing.JTable tblMoto;
    private javax.swing.JTextField txtCombustivel;
    private javax.swing.JTextField txtCor;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtMotor;
    private javax.swing.JTextField txtPesquisa1;
    private javax.swing.JTextField txtPesquisa2;
    private javax.swing.JTextField txtPlaca;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables
    
    //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
        //check menu items FramMenuLang
    @Override
    public JCheckBoxMenuItem getMniIngles() {
        return mniIngles;
    }

    @Override
    public JCheckBoxMenuItem getMniPortugues() {
        return mniPortugues;
    }

    //update lang method
    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Manage Vehicles");
            mnOpcoes.setText("Settings");
            mnLang.setText("Language");
            mniPortugues.setText("Portuguese");
            mniIngles.setText("English");
            mnTema.setText("Theme");
            
            tbVeiculo.setTitleAt(0, "All");
            tbVeiculo.setTitleAt(0, "New");
            
            for(FocusListener focus: txtPesquisa1.getFocusListeners()) {
                txtPesquisa1.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa1.setText("Search car by some field");
            txtPesquisa1.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Search car by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
             for(FocusListener focus: txtPesquisa2.getFocusListeners()) {
                txtPesquisa2.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa2.setText("Search bike by some field");
            txtPesquisa2.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Search bike by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            rdPlaca1.setText("plate");
            rdPlaca2.setText("plate");
            rdCor1.setText("color");
            rdCor2.setText("color");
            rdModelo1.setText("model");
            rdModelo2.setText("model");
            rdTipo1.setText("type");
            rdTipo2.setText("type");
            rdMarca1.setText("brand");
            rdMarca2.setText("brand");
            rdAno1.setText("year");
            rdAno2.setText("year");

            
            tblColumnModelCarro.getColumn(1).setHeaderValue("Type");
            tblColumnModelCarro.getColumn(2).setHeaderValue("Brand");
            tblColumnModelCarro.getColumn(3).setHeaderValue("Model");
            tblColumnModelCarro.getColumn(4).setHeaderValue("Color");
            tblColumnModelCarro.getColumn(5).setHeaderValue("Plate");
            tblColumnModelCarro.getColumn(6).setHeaderValue("Year");
            tblColumnModelCarro.getColumn(7).setHeaderValue("RentDay");
            tblCarro.getTableHeader().resizeAndRepaint();
            
            tblColumnModelMoto.getColumn(1).setHeaderValue("Type");
            tblColumnModelMoto.getColumn(2).setHeaderValue("Brand");
            tblColumnModelMoto.getColumn(3).setHeaderValue("Model");
            tblColumnModelMoto.getColumn(4).setHeaderValue("Color");
            tblColumnModelMoto.getColumn(5).setHeaderValue("Plate");
            tblColumnModelMoto.getColumn(6).setHeaderValue("Year");
            tblColumnModelMoto.getColumn(7).setHeaderValue("RentDay");
            tblMoto.getTableHeader().resizeAndRepaint();
            
            btnPesquisa1.setToolTipText("Press to search");
            btnPesquisa2.setToolTipText("Press to search");  
            
            btnEdicao1.setText("Edit");
            btnEdicao2.setText("Edit");
            btnExcluir1.setText("Delete");
            btnExcluir2.setText("Delete");
            lblTipo.setText("Type");
            lblModelo.setText("Model");
            lblCor.setText("Color");
            lblMarca.setText("Brand");
            lblPlaca.setText("Plate");
            lblCombustivel.setText("Fuel");
            lblAno.setText("Year");
            lblKm.setText("Mileage");
            lblCaucao.setText("Deposit");
            lblValorDiario.setText("Rent Day");
            lblMotor.setText("Engine");
            lblCavalos.setText("Horses");
            lblPortas.setText("Doors");
            lblCilindradas.setText("Cylinder cap.");
            
            rdCarro.setText("Car");
            rdCarro.setText("Bike");
            btnCad.setText("Add");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            
            setTitle("FastVehicles | Gerenciar Veículos");
            
            mnOpcoes.setText("Opções");
            mnLang.setText("Linguagem");
            mniPortugues.setText("Português");
            mniIngles.setText("Inglês");
            mnTema.setText("Tema");
            
            tbVeiculo.setTitleAt(0, "Todos");
            tbVeiculo.setTitleAt(0, "Cadastro");
            
            for(FocusListener focus: txtPesquisa1.getFocusListeners()) {
                txtPesquisa1.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa1.setText("Pesquise carro pelo campo desejado");
            txtPesquisa1.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Pesquise carro pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            for(FocusListener focus: txtPesquisa2.getFocusListeners()) {
                txtPesquisa2.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa2.setText("Pesquise moto pelo campo desejado");
            txtPesquisa2.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Pesquise moto pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            rdPlaca1.setText("placa");
            rdPlaca2.setText("placa");
            rdCor1.setText("cor");
            rdCor2.setText("cor");
            rdModelo1.setText("modelo");
            rdModelo2.setText("modelo");
            rdTipo1.setText("tipo");
            rdTipo2.setText("tipo");
            rdMarca1.setText("marca");
            rdMarca2.setText("marca");
            rdAno1.setText("ano");
            rdAno2.setText("ano");
            
            tblColumnModelCarro.getColumn(1).setHeaderValue("Tipo");
            tblColumnModelCarro.getColumn(2).setHeaderValue("Marca");
            tblColumnModelCarro.getColumn(3).setHeaderValue("Modelo");
            tblColumnModelCarro.getColumn(4).setHeaderValue("Cor");
            tblColumnModelCarro.getColumn(5).setHeaderValue("Placa");
            tblColumnModelCarro.getColumn(6).setHeaderValue("Ano");
            tblColumnModelCarro.getColumn(7).setHeaderValue("ValorDiário");
            tblCarro.getTableHeader().resizeAndRepaint();
            
            tblColumnModelMoto.getColumn(1).setHeaderValue("Tipo");
            tblColumnModelMoto.getColumn(2).setHeaderValue("Marca");
            tblColumnModelMoto.getColumn(3).setHeaderValue("Modelo");
            tblColumnModelMoto.getColumn(4).setHeaderValue("Cor");
            tblColumnModelMoto.getColumn(5).setHeaderValue("Placa");
            tblColumnModelMoto.getColumn(6).setHeaderValue("Ano");
            tblColumnModelMoto.getColumn(7).setHeaderValue("ValorDiário");
            tblMoto.getTableHeader().resizeAndRepaint();
            
            
            btnPesquisa1.setToolTipText("Clique para pesquisar");
            btnPesquisa2.setToolTipText("Clique para pesquisar");  
            
            btnEdicao1.setText("Editar");
            btnEdicao2.setText("Editar");
            btnExcluir1.setText("Excluir");
            btnExcluir2.setText("Excluir");
            
            lblTipo.setText("Tipo");
            lblModelo.setText("Modelo");
            lblCor.setText("Cor");
            lblMarca.setText("Marca");
            lblPlaca.setText("Placa");
            lblCombustivel.setText("Combustível");
            lblAno.setText("Ano");
            lblKm.setText("Quilometragem");
            lblCaucao.setText("Caução");
            lblValorDiario.setText("Valor Diário");
            lblMotor.setText("Motor");
            lblCavalos.setText("Cavalos");
            lblPortas.setText("Portas");
            lblCilindradas.setText("Cilindradas");
            
            rdCarro.setText("Carro");
            rdCarro.setText("Moto");
            btnCad.setText("Cadastrar");
            
	}
   }
    
}
