/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CarroDao;
import dao.InstanceDao;
import dao.LocacaoCarroDao;
import dao.LocacaoMotoDao;
import dao.LocadoraDao;
import dao.MotoDao;
import design.DesignApp;
import idioma.IdiomaApp;
import static java.awt.Frame.NORMAL;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import modelos.Carro;
import modelos.Cliente;
import modelos.Locacao;
import modelos.Moto;
import modelos.Veiculo;

/**
 *
 * @author Isaac
 */
public class ClienteLocacoes extends javax.swing.JFrame 
    implements FrameTheme, WindowListener, FrameLang {
    
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private LocacaoCarroDao locacaoCarroDao = InstanceDao.LOCACAO_CARRO_DAO;
    private LocacaoMotoDao locacaoMotoDao = InstanceDao.LOCACAO_MOTO_DAO;
    private CarroDao carroDao = InstanceDao.CARRO_DAO;
    private MotoDao motoDao = InstanceDao.MOTO_DAO;

    
    private Cliente clienteAtual;
    private DefaultTableModel tblModel;
    private DefaultTableColumnModel tblColumnModel;
    private VerDadosClienteLocacao verDadosFrame;
    
    /**
     * Creates new form ClienteLocacoes
     */
    public ClienteLocacoes() {
        initComponents();
//        //extraConfigs();
//        Locadora locadoraAtual = locadoraDao.get(1L); // to test
//        //addLocadora(locadoraAtual);
//        addCliente(locadoraAtual.getClientes().get(0));
        addWindowListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGeral = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        scrlTblVeiculo = new javax.swing.JScrollPane();
        tblVeiculo = new javax.swing.JTable();
        btnDevolver = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblTitulo.setText("Veículos Locados");

        tblVeiculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrlTblVeiculo.setViewportView(tblVeiculo);

        btnDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/get-back.png"))); // NOI18N
        btnDevolver.setText("Devolver");
        btnDevolver.setToolTipText("Devolver carro locado");
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/see.png"))); // NOI18N
        btnVer.setText("Ver dados");
        btnVer.setToolTipText("Ver dados da locação");
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGeralLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVer)
                .addGap(18, 18, 18)
                .addComponent(btnDevolver)
                .addContainerGap())
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblTitulo)
                .addGap(41, 41, 41)
                .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVer)
                    .addComponent(btnDevolver))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        int row = tblVeiculo.getSelectedRow();
        if(row != -1) {
            if(verDadosFrame == null) { //se a tela nao foi iniciada - if screen was not init
                verDadosFrame = new VerDadosClienteLocacao();
                verDadosFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(verDadosFrame)) { 
                           verDadosFrame = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });

                for(Locacao locacao: clienteAtual.getLocacoes()) {
                    //se id e modelo do veiculo da locacao forem iguais ao da linha selecionada
                    if(locacao.getId() == (Long)tblModel.getValueAt(row, 0)
                        && locacao.getVeiculo().getModelo().equals(
                            String.valueOf(tblModel.getValueAt(row, 1)))) { 
                        verDadosFrame.addLocacao(locacao); //add locacao ao verDadosFrame
                        break; // fecha loop
                    }
                }
                
                verDadosFrame.setVisible(true); //torna o frame visivel

            }else if(verDadosFrame.getExtendedState() != NORMAL) {
                verDadosFrame.setExtendedState(NORMAL);
            }else {
                verDadosFrame.requestFocus();
            }
        }else { //se a linha nao esta selecionada - if line is not selected
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Linha não selecionada", 
                    "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
                
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "No line selected", 
                    "No Selection!", JOptionPane.ERROR_MESSAGE);
            }
        
        }
                                    
    }//GEN-LAST:event_btnVerActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
        int row = tblVeiculo.getSelectedRow();
        if(row != -1) { //se linha eh selecionada - if row is selected
            
            for(Locacao locacao: clienteAtual.getLocacoes()) {
                //se id e modelo do veiculo da locacao forem iguais ao da linha selecionada
                if(locacao.getId() == (Long)tblModel.getValueAt(row, 0)
                    && locacao.getVeiculo().getModelo().equals(
                        String.valueOf(tblModel.getValueAt(row, 1)))) { 
                    
                    Veiculo veiculo = locacao.getVeiculo(); //pega o veiculo - get vehicle
            
                    if(veiculo instanceof Carro) { //se for carro
                        locacaoCarroDao.delete(locacao); //del do bd - del from bd
                        carroDao.updateCliente((Carro)veiculo, null); //atualiza carro com id de cliente null - update car put client id as null
                    }else { //se for moto
                        locacaoMotoDao.delete(locacao);
                        motoDao.updateCliente((Moto)veiculo, null);
                    }
                    
                    clienteAtual.getLocacoes().remove(locacao); //remove da lista de locacoes - del from locacoes list
                     
                    int count = 0; //contador para ajudar a veirificar se nao ha mais locacoes da mesma locadora
                    for(Locacao locacao2: clienteAtual.getLocacoes()) { //percorre as locacoes novamente
                        if(locacao.getLocadora().getNome(
                            ).equals(locacao2.getLocadora().getNome())) { //se locadora2 tem mesmo nome da locadaora
                            break;// fecha loop
                        }
                       
                        ++count;
                    }
                    
                    if(count == clienteAtual.getLocacoes().size()){ //se nao ha nenhuma locacao com a mesma locadora
                        locadoraDao.deleteCliente(clienteAtual.getId()); //deleta cliente da locadora
                    }
                    
                    tblModel.removeRow(row); //remove a linha selecionada - remove selected row 
                    
                    //calcula valor total tbm para caso o veiculo seja entregue antes da data
                    java.sql.Date dataAtual = new java.sql.Date(System.currentTimeMillis());
                    locacao.setValorTotal(calcValorTotal(dataAtual, locacao.getDataLocacao(), veiculo)); //coloca novo valor no valor total
                    //mensagem de cadastro com sucesso
                    URL url = getClass().getResource("/images/success.png");
                    ImageIcon sucessIcon = new ImageIcon(url);
                    
                    if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                        JOptionPane.showMessageDialog(this, "Veículo devolvido com sucesso.!"
                            + "\nPague R$ " + (locacao.getValorTotal() + locacao.getMulta()) 
                            + " à locadora " + locacao.getLocadora().getNome().toUpperCase()
                            + "\nValor total: R$ " + locacao.getValorTotal() 
                            + "\nMulta: R$ " + locacao.getMulta(),
                            "Veículo Devolvido!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                        
                    }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                        JOptionPane.showMessageDialog(this, "Vehicle successfully borrowed!"
                            + "\nPay $ " + (locacao.getValorTotal() + locacao.getMulta()) 
                            + " BRL to locator " + locacao.getLocadora().getNome().toUpperCase()
                            + "\nTotal: $ " + locacao.getValorTotal() + " BRL" 
                            + "\nTicket: $ " + locacao.getMulta() + " BRL",
                            "Vehicle Borrowed!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                    }




                    break; // fecha loop maior
                }
            }
            

        }else { //se a linha nao esta selecionada - if line is not selected
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Linha não selecionada", 
                    "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
                
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "No line selected", 
                    "No Selection!", JOptionPane.ERROR_MESSAGE);
            }
        
        }
        
        
        
    }//GEN-LAST:event_btnDevolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteLocacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteLocacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteLocacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteLocacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteLocacoes().setVisible(true);
            }
        });
    }
    
    public void extraConfigs() {
        setTitle("FastVehicles | Veículos locados do Cliente - " 
            + clienteAtual.getNome().toUpperCase());
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }

        //configura tabela carros - setup car table    
        lblTitulo.setFont(DesignApp.fonteTitulo);
        btnVer.setFont(DesignApp.fonteGeral);
        btnDevolver.setFont(DesignApp.fonteGeral);
        
        tblModel = new DefaultTableModel(new String[]{"Id", "Modelo", "Locadora", 
            "Locação", "Entrega", "Multa"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tblVeiculo.setModel(tblModel);
        tblVeiculo.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModel = ((DefaultTableColumnModel) tblVeiculo.getColumnModel());
        tblColumnModel.getColumn(0).setPreferredWidth(30);
        tblColumnModel.getColumn(1).setPreferredWidth(150);
        tblColumnModel.getColumn(2).setPreferredWidth(150);
        tblColumnModel.getColumn(3).setPreferredWidth(150);
        tblColumnModel.getColumn(4).setPreferredWidth(150);
        
        updateTbl();
        
        //update lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
            updateLangComponents();
        }

        
    }
    
    public void updateTbl() {
        tblModel.setRowCount(0);
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        clienteAtual.setLocacoes(new ArrayList<Locacao>(5)); //reinicializa a lista de veiculos
        clienteAtual.getLocacoes().addAll(locacaoCarroDao.getAllByCliente(clienteAtual)); //add locacoes dos carros
        clienteAtual.getLocacoes().addAll(locacaoMotoDao.getAllByCliente(clienteAtual)); //add locacoes das motos
        //add veiculos na tabela - add vehicles to table 
        for(Locacao locacao: clienteAtual.getLocacoes()) {
            //calcula multa
            java.sql.Date dataAtual = new java.sql.Date(System.currentTimeMillis()); //pega data atual
            double totalMulta = calcValorTotal(dataAtual, locacao.getDataEntrega(), 
                locacao.getVeiculo()); //retorna um numero real negativo, nulo ou positivo
            if(totalMulta > 0) { //se dataAtual > data de entrega ( valor positivo )
                locacao.setMulta(totalMulta); //adiciona multa linear proporcional ao valor do veiculo
            }

            tblModel.addRow(new Object[] {locacao.getId(),    
                locacao.getVeiculo().getModelo(), locacao.getLocadora().getNome(),
                sdf.format(locacao.getDataLocacao()), sdf.format(locacao.getDataEntrega()),
                locacao.getMulta()}); 
        }
      
        
    }
    
    public void addCliente(Cliente c) {
        this.clienteAtual = c;
        extraConfigs();
    }
    

    //calcula valor total a partir das datas e do veiculo atual
    private double calcValorTotal(java.sql.Date dataEntrega, 
            java.sql.Date dataLocacao, Veiculo veiculo) {
        Calendar calEnt = Calendar.getInstance();
        calEnt.setTime(dataEntrega);
        Calendar calLoc = Calendar.getInstance();
        calLoc.setTime(dataLocacao);
        
        int[] dataEntArray = {calEnt.get(Calendar.DAY_OF_MONTH), 
            (calEnt.get(Calendar.MONTH) + 1), calEnt.get(Calendar.YEAR)}; //array com dados da data entrega
        
        int[] dataLocArray = {calLoc.get(Calendar.DAY_OF_MONTH), 
            (calLoc.get(Calendar.MONTH) + 1), calLoc.get(Calendar.YEAR)}; //array com dados da data entrega
                
        int dias = (dataEntArray[2] - dataLocArray[2])*365 //diferenca entre anos * 365
            + (dataEntArray[1] - dataLocArray[1])*30 //diferenca entre meses * 30
            + (dataEntArray[0] - dataLocArray[0]); //diferenca entre dias
        
//        System.out.println("dias " + dias);
        return dias * veiculo.getValorDiario(); //multiplica dias pelo valor diario
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnVer;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JScrollPane scrlTblVeiculo;
    private javax.swing.JTable tblVeiculo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resetaListenerCampos() {
        //faz nada ( facilitar )
    }
    
     //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
     //update lang method
    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Rented Vehicles Client - " 
                + clienteAtual.getNome().toUpperCase());
            lblTitulo.setText("Rented Vehilces");
            btnVer.setText("See data");
            btnDevolver.setText("Get back");
            
            tblColumnModel.getColumn(1).setHeaderValue("Model");
            tblColumnModel.getColumn(2).setHeaderValue("Locator");
            tblColumnModel.getColumn(3).setHeaderValue("Rent");
            tblColumnModel.getColumn(4).setHeaderValue("Get back");
            tblColumnModel.getColumn(5).setHeaderValue("Ticket");
            tblVeiculo.getTableHeader().resizeAndRepaint();
            
            btnVer.setToolTipText("See rent data");
            btnDevolver.setToolTipText("Get vehicle back");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            setTitle("FastVehicles | Veículos locados do Cliente - " 
                + clienteAtual.getNome().toUpperCase());
            lblTitulo.setText("Veículos Locados");
            btnVer.setText("Ver dados");
            btnDevolver.setText("Devolver");
            tblColumnModel.getColumn(1).setHeaderValue("Modelo");
            tblColumnModel.getColumn(2).setHeaderValue("Locadora");
            tblColumnModel.getColumn(3).setHeaderValue("Locação");
            tblColumnModel.getColumn(4).setHeaderValue("Entrega");
            tblColumnModel.getColumn(5).setHeaderValue("Multa");
            tblVeiculo.getTableHeader().resizeAndRepaint();
            
            btnVer.setToolTipText("Ver dados da locação");
            btnDevolver.setToolTipText("Devolver veículo locado");

	}
    }
}
