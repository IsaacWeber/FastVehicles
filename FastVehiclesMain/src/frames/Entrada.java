/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CartaoDao;
import dao.ClienteDao;
import dao.InstanceDao;
import dao.LocadoraDao;
import listener.TipNoFocus;
import design.DesignApp;
import idioma.IdiomaApp;
import java.awt.Color;
import java.awt.Font;
import static java.awt.Frame.NORMAL;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowListener;
import java.net.URL;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import modelos.Cliente;
import modelos.Locadora;
import validadores.Validador;
/**
 *
 * @author Isaac
 */
public class Entrada extends javax.swing.JFrame 
        implements WindowListener, FrameTheme, FrameMenuTheme,
        FrameLang, FrameMenuLang {
    
    private ButtonGroup gpRadio;
    private CadastroCliente cadClienteTela;
    private CadastroLocadora cadLocadoraTela;
    private EntradaLocadora entLocadoraTela;
    private EntradaCliente entClienteTela;
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private ClienteDao clienteDao = InstanceDao.CLIENTE_DAO;
    private CartaoDao cartaoDao = InstanceDao.CARTAO_DAO;
    
    /**
     * Creates new form Entrada
     */
    public Entrada() {
        initComponents();
        extraConfigs();
        addWindowListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        pnGeral = new javax.swing.JPanel();
        pnCampos = new javax.swing.JPanel();
        lblEmail = new javax.swing.JLabel();
        lblSenha = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        pwSenha = new javax.swing.JPasswordField();
        rdCliente = new javax.swing.JRadioButton();
        rdLocadora = new javax.swing.JRadioButton();
        btnEntrar = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        lblCadastro = new javax.swing.JLabel();
        lblInfoCadastro = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOpcoes = new javax.swing.JMenu();
        mnLang = new javax.swing.JMenu();
        mniPortugues = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniIngles = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnTema = new javax.swing.JMenu();
        mniLight = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mniDark = new javax.swing.JCheckBoxMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FastVehicles | Autenticar");

        lblEmail.setText("Email");

        lblSenha.setText("Senha");

        txtEmail.setToolTipText("Digite o seu email");
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        pwSenha.setToolTipText("Digite sua senha");

        rdCliente.setText("Cliente");
        rdCliente.setToolTipText("Entrar como cliente");
        rdCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdClienteActionPerformed(evt);
            }
        });

        rdLocadora.setText("Locadora");
        rdLocadora.setToolTipText("Entrar como locadora");
        rdLocadora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdLocadoraActionPerformed(evt);
            }
        });

        btnEntrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/enter.png"))); // NOI18N
        btnEntrar.setText("Entrar");
        btnEntrar.setToolTipText("Clique para acessar sua conta");
        btnEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCamposLayout = new javax.swing.GroupLayout(pnCampos);
        pnCampos.setLayout(pnCamposLayout);
        pnCamposLayout.setHorizontalGroup(
            pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCamposLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnCamposLayout.createSequentialGroup()
                        .addComponent(rdCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdLocadora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addComponent(btnEntrar)
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(pnCamposLayout.createSequentialGroup()
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addComponent(lblSenha))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                            .addComponent(pwSenha))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnCamposLayout.setVerticalGroup(
            pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSenha))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEntrar)
                    .addComponent(rdLocadora)
                    .addComponent(rdCliente))
                .addGap(12, 12, 12))
        );

        lblTitulo.setText("Autenticação");

        lblCadastro.setText("cadastre-se");

        lblInfoCadastro.setText("Não é cadastrado ainda ?");

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGeralLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblInfoCadastro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInfoCadastro)
                    .addComponent(lblCadastro)))
        );

        mnOpcoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        mnOpcoes.setText("Opções");
        mnOpcoes.setToolTipText("");

        mnLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lang.png"))); // NOI18N
        mnLang.setText("Linguagem");

        mniPortugues.setSelected(true);
        mniPortugues.setText("Português");
        mniPortugues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazil.png"))); // NOI18N
        mniPortugues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPortuguesActionPerformed(evt);
            }
        });
        mnLang.add(mniPortugues);
        mnLang.add(jSeparator1);

        mniIngles.setSelected(true);
        mniIngles.setText("Inglês");
        mniIngles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usa.png"))); // NOI18N
        mniIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInglesActionPerformed(evt);
            }
        });
        mnLang.add(mniIngles);

        mnOpcoes.add(mnLang);
        mnOpcoes.add(jSeparator2);

        mnTema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/themes.png"))); // NOI18N
        mnTema.setText("Tema");

        mniLight.setSelected(true);
        mniLight.setText("Light");
        mniLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sun.png"))); // NOI18N
        mniLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLightActionPerformed(evt);
            }
        });
        mnTema.add(mniLight);
        mnTema.add(jSeparator3);

        mniDark.setSelected(true);
        mniDark.setText("Dark");
        mniDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/moon.png"))); // NOI18N
        mniDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDarkActionPerformed(evt);
            }
        });
        mnTema.add(mniDark);

        mnOpcoes.add(mnTema);

        jMenuBar1.add(mnOpcoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void rdClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdClienteActionPerformed

    private void btnEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntrarActionPerformed
        String email = txtEmail.getText().trim();
        String senha = String.valueOf(pwSenha.getPassword());
        boolean found = false;
        
        if(!placeholderOrEmpty(txtEmail) && Validador.emailCerto(email)) { //se email correto - if email is ok
            if(pwSenha.getForeground() == DesignApp.FIELD_FONT_COLOR
                && senha.length() > 0) { //se senha n esta vazia - if pw is not empty
                    
                    if(rdLocadora.isSelected()) { //se for locadora - if it is a locator
                        for(Locadora loc: locadoraDao.getAll()) { 
                         
                            if(loc.getEmail().equals(email)) { //se o email existe - if email exist
                                found = true; //entidade encontrada - toogle found to true cause the entity was found
               
                                if(loc.getSenha().equals(senha)) { //se a senha da locadora bate - if senha from this locator is correct
                                    if(entLocadoraTela == null) { //se a tela nao foi iniciada - if screen was not init
                                       entLocadoraTela = new EntradaLocadora();
                                       entLocadoraTela.addWindowListener(new WindowAdapter() {
                                           @Override
                                           public void windowClosed(WindowEvent e) {
                                              if(e.getComponent().equals(entLocadoraTela)) { 
                                                  entLocadoraTela = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                                              }
                                           }
                                       });
                                       
                                       entLocadoraTela.addLocadora(loc); //adiciona locadora para operacoes necessarias - add locator to do all ops
                                       entLocadoraTela.setVisible(true);

                                   }else if(entLocadoraTela.getExtendedState() != NORMAL) {
                                       entLocadoraTela.setExtendedState(NORMAL);
                                   }else {
                                       entLocadoraTela.requestFocus();
                                   }
                                    
                                }else { //senha incorreta - incorrect keyword 
                                    if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                                        JOptionPane.showMessageDialog(this, "A senha não está correta!"
                                            + "\nVerifique a senha e digite novamente.",
                                            "Senha Incorreta!", JOptionPane.ERROR_MESSAGE);
                                    }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                                        JOptionPane.showMessageDialog(this, "Password does not match!"
                                            + "\nVerify password and try again.",
                                            "Password Does Not Match!", JOptionPane.ERROR_MESSAGE);
                                    }

                                }
                                
                            }
                        }
                        
                        if(!found){ //email de locadora nao encontrado - locator email was not found
                           
                            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                                JOptionPane.showMessageDialog(this, "O e-mail não pertence a nenhuma locadora:"
                                    + "\nVerifique o e-mail da locadora.",
                                       "E-mail Não Existe", JOptionPane.ERROR_MESSAGE);
                            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                                JOptionPane.showMessageDialog(this, "Email does not belong to any locator:"
                                    + "\nVerify email and try again.",
                                   "Email Does Not Exist", JOptionPane.ERROR_MESSAGE);
                            }
                            

                        }
                        
                    }else { //se rdCliente esta selecionado - if rdCliente is selected
                        for(Cliente cliente: clienteDao.getAll()) { 
                         
                            if(cliente.getEmail().equals(email)) { //se o email existe - if email exist
                                found = true; //entidade encontrada - toogle found to true cause the entity was found
               
                                if(cliente.getSenha().equals(senha)) { //se a senha da locadora bate - if senha from this locator is correct
                                    if(entClienteTela == null) { //se a tela nao foi iniciada - if screen was not init
                                        entClienteTela = new EntradaCliente();
                                        entClienteTela.addWindowListener(new WindowAdapter() {
                                            @Override
                                            public void windowClosed(WindowEvent e) {
                                               if(e.getComponent().equals(entClienteTela)) { 
                                                   entClienteTela = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                                               }
                                            }
                                        });
                                        
                                        entClienteTela.addCliente(cliente); //adiciona cliente
                                        entClienteTela.setVisible(true);

                                    }else if(entClienteTela.getExtendedState() != NORMAL) {
                                        entClienteTela.setExtendedState(NORMAL);
                                    }else {
                                        entClienteTela.requestFocus();
                                    }
                                    
                                }else { //senha incorreta - incorrect keyword 
                                    
                                    if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                                        JOptionPane.showMessageDialog(this, "A senha não está correta!"
                                            + "\nVerifique a senha e digite novamente.",
                                            "Senha Incorreta!", JOptionPane.ERROR_MESSAGE);
                                    }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                                        JOptionPane.showMessageDialog(this, "Password does not match!"
                                            + "\nVerify password and try again.",
                                            "Password Does Not Match!", JOptionPane.ERROR_MESSAGE);
                                    }

                                }
                                
                            }
                        }
                        
                                                
                        if(!found){ //email de cliente nao encontrado - locator email was not found
                           
                            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                                JOptionPane.showMessageDialog(this, "O e-mail não pertence a nenhuma locadora:"
                                    + "\nVerifique o e-mail do cliente.",
                                    "E-mail Não Existe", JOptionPane.ERROR_MESSAGE);
                            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                                JOptionPane.showMessageDialog(this, "Email does not belong to any client:"
                                    + "\nVerify email and try again.",
                                    "Email Does Not Exist", JOptionPane.ERROR_MESSAGE);
                            }

                        }
                        
                    }
                    
            }else { //senha vazia
                
                if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                   JOptionPane.showMessageDialog(this, "Preencha a senha!",
                        "Senha Vazia!", JOptionPane.ERROR_MESSAGE);
                }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                    JOptionPane.showMessageDialog(this, "Fill out your password!",
                        "Empty Password!", JOptionPane.ERROR_MESSAGE);
                }

            }
        }else { //se email n esta correto
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "O e-mail não pertence a nenhuma locadora:"
                    + "\nVerifique o e-mail.",
                       "E-mail Não Existe", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Email does not belong to any locator:"
                    + "\nVerify email and try again.",
                   "Email Does Not Exist", JOptionPane.ERROR_MESSAGE);
            }   
            
        }
        
    }//GEN-LAST:event_btnEntrarActionPerformed

    private void rdLocadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdLocadoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdLocadoraActionPerformed

    private void mniDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDarkActionPerformed

        //coloca padroes para o dark mode
        UIManager.put( "control", new Color( 128, 128, 128) );
        UIManager.put( "info", new Color(128,128,128) );
        UIManager.put( "nimbusBase", new Color( 18, 30, 49) );
        UIManager.put( "nimbusAlertYellow", new Color( 248, 187, 0) );
        UIManager.put( "nimbusDisabledText", new Color( 128, 128, 128) );
        UIManager.put( "nimbusFocus", new Color(115,164,209) );
        UIManager.put( "nimbusGreen", new Color(176,179,50) );
        UIManager.put( "nimbusInfoBlue", new Color( 66, 139, 221) );
        UIManager.put( "nimbusLightBackground", new Color( 18, 30, 49) );
        UIManager.put( "nimbusOrange", new Color(191,98,4) );
        UIManager.put( "nimbusRed", new Color(169,46,34) );
        UIManager.put( "nimbusSelectedText", new Color(255, 255, 255) );
        UIManager.put( "nimbusSelectionBackground", new Color( 104, 93, 156) );
        UIManager.put( "text", new Color( 230, 230, 230) );
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                
            }
            
            //toogle tema
            DesignApp.temaAtual = "dark";
            
            //toogle menu
            mniDark.setSelected(true);
            mniLight.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
        
            InstanceFrame.updateAllFrames(); //atualiza os frames
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        

    }//GEN-LAST:event_mniDarkActionPerformed

    private void mniLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLightActionPerformed
        
        //restaura frame para o padrao
        UIManager.put( "control", null);
        UIManager.put( "info", null);
        UIManager.put( "nimbusBase", null);
        UIManager.put( "nimbusAlertYellow", null);
        UIManager.put( "nimbusDisabledText", null);
        UIManager.put( "nimbusFocus", null);
        UIManager.put( "nimbusGreen", null);
        UIManager.put( "nimbusInfoBlue", null);
        UIManager.put( "nimbusLightBackground", null);
        UIManager.put( "nimbusOrange", null);
        UIManager.put( "nimbusRed", null);
        UIManager.put( "nimbusSelectedText", null);
        UIManager.put( "nimbusSelectionBackground", null);
        UIManager.put( "text", null);
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
  
            }
            
            //toogle tema
            DesignApp.temaAtual = "light";
            
            //toogle menu - coloca light como selecionado
            mniLight.setSelected(true);
            mniDark.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = Color.BLACK;
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            
            InstanceFrame.updateAllFrames(); //atualiza os frames
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        

    }//GEN-LAST:event_mniLightActionPerformed

    private void mniPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPortuguesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.PORTUGUES; //coloca idioma como portugues no IdiomaApp
        
        //toggle lang
        mniPortugues.setSelected(true);//muda para portugues
        mniIngles.setSelected(false);  
       
        
        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniPortuguesActionPerformed

    private void mniInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInglesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.INGLES; //coloca idioma como ingles no IdiomaApp
        
        //toggle lang
        mniIngles.setSelected(true);  //muda para ingles
        mniPortugues.setSelected(false);
        
        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniInglesActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Entrada().setVisible(true);
            }
        });
    }
    
    @Override
    public JCheckBoxMenuItem getMniIngles() {
        return mniIngles;
    }

    public void setMniIngles(JCheckBoxMenuItem mniIngles) {
        this.mniIngles = mniIngles;
    }

    @Override
    public JCheckBoxMenuItem getMniPortugues() {
        return mniPortugues;
    }
    
    
    public void setMniPortugues(JCheckBoxMenuItem mniPortugues) {
        this.mniPortugues = mniPortugues;
    }
    
    
    public void extraConfigs() {
        
        //configs do frame - frames config
        setLocationRelativeTo(null);
        setResizable(false);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }
       
        //confgs dos elementos - elements configs
        lblTitulo.setFont(DesignApp.fonteTitulo);
        lblCadastro.setFont(new Font(Font.DIALOG, Font.BOLD, 15));
        lblCadastro.setForeground(new Color(49, 64, 251)); //azul - blue
        lblInfoCadastro.setFont(DesignApp.fonteGeralPequena);
        lblEmail.setFont(DesignApp.fonteGeral);
        lblSenha.setFont(DesignApp.fonteGeral);
        
        txtEmail.setFont(DesignApp.fonteGeral);
        pwSenha.setFont(DesignApp.fonteGeral);
        
        gpRadio = new ButtonGroup();
        gpRadio.add(rdCliente);
        gpRadio.add(rdLocadora);
        rdCliente.setSelected(true);
        rdCliente.setFont(DesignApp.fonteGeral);
        rdLocadora.setFont(DesignApp.fonteGeral);
        
        
        //eventos gerais - general events
        //placeholder

        txtEmail.addFocusListener(new TipNoFocus(
                txtEmail,"Ex.: mail@mail.com",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        pwSenha.addFocusListener(new TipNoFocus(
                pwSenha,"Ex.: mail@mail.com", 
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 1));

       
        //toggle tema
        mniLight.setSelected(true); //deixa mniLight checado
        mniDark.setSelected(false);
        
        //toggle lang
        mniPortugues.setSelected(true); //deixa portugues como padrao
        mniIngles.setSelected(false);
        
        //cadastre-se - sign up
        lblCadastro.addMouseListener(new MouseListener() {
            @Override
            public void mousePressed(MouseEvent e) {
                //put your code here
            }

            @Override
            public void mouseReleased(MouseEvent e) {
               //put your code here
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                lblCadastro.setForeground(new Color(123, 133, 253)); //azul claro - light blue
            }

            @Override
            public void mouseExited(MouseEvent e) {
                lblCadastro.setForeground(new Color(49, 64, 251)); //azul - blue
            }
          
            @Override
            public void mouseClicked(MouseEvent e) {
                
                if(rdCliente.isSelected()) { //verifica se o rdCliente esta selecionado - verify if rdCliente radio button is selected
                    if(cadClienteTela == null) { //se a tela nao foi iniciada - if screen was not init
                        cadClienteTela = new CadastroCliente();
                        cadClienteTela.addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowClosed(WindowEvent e) {
                               if(e.getComponent().equals(cadClienteTela)) { 
                                   cadClienteTela = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                               }
                            }
                        });
                        cadClienteTela.setVisible(true);
                        
                    }else if(cadClienteTela.getExtendedState() != NORMAL) {
                        cadClienteTela.setExtendedState(NORMAL);
                    }else {
                        cadClienteTela.requestFocus();
                    }
                
                }else { //rdLocadora is selected 
                    if(cadLocadoraTela == null) { //se a tela nao foi iniciada - if screen was not init
                        cadLocadoraTela = new CadastroLocadora();
                        cadLocadoraTela.addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowClosed(WindowEvent e) {
                               if(e.getComponent().equals(cadLocadoraTela)) { 
                                   cadLocadoraTela = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                               }
                            }
                        });
                        cadLocadoraTela.setVisible(true);
                        
                    }else if(cadLocadoraTela.getExtendedState() != NORMAL) {
                        cadLocadoraTela.setExtendedState(NORMAL);
                    }else {
                        cadLocadoraTela.requestFocus();
                    }
                }
            }
        });
        
        
    }
    
    @Override
    public void resetaListenerCampos() {
        txtEmail.setText("");
        pwSenha.setText("");
        txtEmail.setForeground(DesignApp.FIELD_FONT_COLOR);
        pwSenha.setForeground(DesignApp.FIELD_FONT_COLOR);
        
        for(FocusListener focus: txtEmail.getFocusListeners()) { //percorre listeneers
            txtEmail.removeFocusListener(focus);//remove focus listeners
        }
        
        for(FocusListener focus: pwSenha.getFocusListeners()) { //percorre listeners
            pwSenha.removeFocusListener(focus);//remove focus listeners
        }
        
        txtEmail.addFocusListener(new TipNoFocus(
            txtEmail,"Ex.: mail@mail.com",
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 0)); //add listener dnv com cores alteradas
        
        pwSenha.addFocusListener(new TipNoFocus(
            pwSenha,"Ex.: mail@mail.com", 
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 1));
    }
    
    public boolean placeholderOrEmpty(JTextField comp) { //verifica se campo tem texto de exemplo padrao
        return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR
            || comp.getText().trim().isEmpty();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEntrar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblCadastro;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblInfoCadastro;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JMenu mnLang;
    private javax.swing.JMenu mnOpcoes;
    private javax.swing.JMenu mnTema;
    private javax.swing.JCheckBoxMenuItem mniDark;
    private javax.swing.JCheckBoxMenuItem mniIngles;
    private javax.swing.JCheckBoxMenuItem mniLight;
    private javax.swing.JCheckBoxMenuItem mniPortugues;
    private javax.swing.JPanel pnCampos;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JPasswordField pwSenha;
    private javax.swing.JRadioButton rdCliente;
    private javax.swing.JRadioButton rdLocadora;
    private javax.swing.JTextField txtEmail;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public JCheckBoxMenuItem getMniDark(){
        return mniDark;
    }
    
    @Override
    public JCheckBoxMenuItem getMniLight(){
        return mniLight;
    }
        
    //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Sign in");
            lblTitulo.setText("Sign in");
            lblSenha.setText("Password");
            rdCliente.setText("Client");
            rdLocadora.setText("Locator");
            btnEntrar.setText("Sign in");
            lblInfoCadastro.setText("Are you not signed up yet ?");
            lblCadastro.setText("sign up");

            mnOpcoes.setText("Settings");
            mnLang.setText("Language");
            mniPortugues.setText("Portuguese");
            mniIngles.setText("English");
            mnTema.setText("Theme");
            
            txtEmail.setToolTipText("Type your email");
            pwSenha.setToolTipText("Type your password");
            rdCliente.setToolTipText("Log as client");
            rdLocadora.setToolTipText("Log as locator");
            btnEntrar.setToolTipText("Press to sign in");
            
        }else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES){ //se for portugues
            setTitle("FastVehicles | Autenticação");
            lblTitulo.setText("Autenticar");
            lblSenha.setText("Senha");
            rdCliente.setText("Cliente");
            rdLocadora.setText("Locadora");
            btnEntrar.setText("Entrar");
            lblInfoCadastro.setText("Não é cadastrado ainda ?");
            lblCadastro.setText("cadastre-se");

            mnOpcoes.setText("Opções");
            mnLang.setText("Linguagem");
            mniPortugues.setText("Português");
            mniIngles.setText("Inglês");
            mnTema.setText("Tema");
            
            txtEmail.setToolTipText("Digite seu e-mail");
            pwSenha.setToolTipText("Digite sua senha");
            rdCliente.setToolTipText("Usar como cliente");
            rdLocadora.setToolTipText("Usar como locadora");
            btnEntrar.setToolTipText("Clique para acessar sua conta");
        }
        
    }
}
