/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.InstanceDao;
import dao.LocadoraDao;
import design.DesignApp;
import idioma.IdiomaApp;
import java.awt.Color;
import static java.awt.Frame.NORMAL;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import listener.TipNoFocus;
import modelos.Cliente;
import modelos.Locadora;

/**
 *
 * @author Isaac
 */
public class EntradaCliente extends javax.swing.JFrame
    implements WindowListener, FrameTheme, FrameMenuTheme,
    FrameLang, FrameMenuLang {
     
    private ButtonGroup btnGroup;
    private DefaultTableModel tblModel;
    private DefaultTableColumnModel tblColumnModel;
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private Cliente clienteAtual;
    private ClienteAcesso clienteAcesso;
    private ClienteCartoes clienteCartoes;
    private ClienteLocacoes clienteLocacoes;
    
    /*
     * Creates new form EntradaCliente
     */
    public EntradaCliente() {
        initComponents();
        addWindowListener(this);
        //extraConfigs(); call it inside addcliente
//        Locadora locadoraAtual = locadoraDao.get(1L); // to test
//        //addLocadora(locadoraAtual);
//        addCliente(locadoraAtual.getClientes().get(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGeral = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        btnPesquisa = new javax.swing.JButton();
        pnRadio = new javax.swing.JPanel();
        rdId = new javax.swing.JRadioButton();
        rdCnpj = new javax.swing.JRadioButton();
        rdEmail = new javax.swing.JRadioButton();
        rdNome = new javax.swing.JRadioButton();
        rdTelefone = new javax.swing.JRadioButton();
        scrlTblLocadora = new javax.swing.JScrollPane();
        tblLocadora = new javax.swing.JTable();
        btnAcessar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnGerenciar = new javax.swing.JMenu();
        mniCartoes = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mniVeiculos = new javax.swing.JMenuItem();
        mnOpcoes = new javax.swing.JMenu();
        mnLang = new javax.swing.JMenu();
        mniPortugues = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniIngles = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnTema = new javax.swing.JMenu();
        mniLight = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniDark = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FastVehicles | Entrada Cliente");

        lblTitulo.setText("Escolha uma locadora");

        txtPesquisa.setToolTipText("Campo de pesquisa");
        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });

        btnPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa.setToolTipText("Clique para pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });

        rdId.setText("id");
        rdId.setToolTipText("Pesquise por Id");

        rdCnpj.setText("cnpj");
        rdCnpj.setToolTipText("Pesquise por cpf");
        rdCnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCnpjActionPerformed(evt);
            }
        });

        rdEmail.setText("email");
        rdEmail.setToolTipText("Pesquise por email");

        rdNome.setText("nome");
        rdNome.setToolTipText("Pesquise por nome");
        rdNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdNomeActionPerformed(evt);
            }
        });

        rdTelefone.setText("telefone");
        rdTelefone.setToolTipText("Pesquise por telefone");

        javax.swing.GroupLayout pnRadioLayout = new javax.swing.GroupLayout(pnRadio);
        pnRadio.setLayout(pnRadioLayout);
        pnRadioLayout.setHorizontalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addComponent(rdId)
                .addGap(18, 18, 18)
                .addComponent(rdCnpj)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdTelefone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdNome)
                .addContainerGap(131, Short.MAX_VALUE))
        );
        pnRadioLayout.setVerticalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId)
                    .addComponent(rdCnpj)
                    .addComponent(rdEmail)
                    .addComponent(rdNome)
                    .addComponent(rdTelefone))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        tblLocadora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrlTblLocadora.setViewportView(tblLocadora);

        btnAcessar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/enter.png"))); // NOI18N
        btnAcessar.setText("Acessar");
        btnAcessar.setToolTipText("Acesse a locadora selecionada");
        btnAcessar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcessarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrlTblLocadora)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(btnPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addComponent(btnAcessar))
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(lblTitulo)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lblTitulo)
                .addGap(28, 28, 28)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrlTblLocadora, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAcessar)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        mnGerenciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/manage.png"))); // NOI18N
        mnGerenciar.setText("Gerenciar");

        mniCartoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/card.png"))); // NOI18N
        mniCartoes.setText("Cartões");
        mniCartoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCartoesActionPerformed(evt);
            }
        });
        mnGerenciar.add(mniCartoes);
        mnGerenciar.add(jSeparator2);

        mniVeiculos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/vehicle.png"))); // NOI18N
        mniVeiculos.setText("Veiculos");
        mniVeiculos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniVeiculosActionPerformed(evt);
            }
        });
        mnGerenciar.add(mniVeiculos);

        jMenuBar1.add(mnGerenciar);

        mnOpcoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        mnOpcoes.setText("Opções");
        mnOpcoes.setToolTipText("");

        mnLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lang.png"))); // NOI18N
        mnLang.setText("Linguagem");

        mniPortugues.setSelected(true);
        mniPortugues.setText("Português");
        mniPortugues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazil.png"))); // NOI18N
        mniPortugues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPortuguesActionPerformed(evt);
            }
        });
        mnLang.add(mniPortugues);
        mnLang.add(jSeparator1);

        mniIngles.setSelected(true);
        mniIngles.setText("Inglês");
        mniIngles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usa.png"))); // NOI18N
        mniIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInglesActionPerformed(evt);
            }
        });
        mnLang.add(mniIngles);

        mnOpcoes.add(mnLang);
        mnOpcoes.add(jSeparator3);

        mnTema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/themes.png"))); // NOI18N
        mnTema.setText("Tema");

        mniLight.setSelected(true);
        mniLight.setText("Light");
        mniLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sun.png"))); // NOI18N
        mniLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLightActionPerformed(evt);
            }
        });
        mnTema.add(mniLight);
        mnTema.add(jSeparator4);

        mniDark.setSelected(true);
        mniDark.setText("Dark");
        mniDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/moon.png"))); // NOI18N
        mniDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDarkActionPerformed(evt);
            }
        });
        mnTema.add(mniDark);

        mnOpcoes.add(mnTema);

        jMenuBar1.add(mnOpcoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed
        tblLocadora.clearSelection();
        if(!placeholderOrEmpty(txtPesquisa)) { //se barra de pesquisa n esta vazia
            
            String searchText = txtPesquisa.getText(); //pega texto de pesquisa 
            boolean found = false;
            String type = "Id";
            int column = 0;

            //edita a coluna e tipo de dado - edit column and data type
            if(rdNome.isSelected()) {
                column = 1;
                type = IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES 
                    ? "Nome"
                    : "Name"; //envia valor dependendo do idioma

            }else if(rdTelefone.isSelected()) {
                column = 2;
                type = IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES 
                    ? "Telefone"
                    : "Phone"; //envia valor dependendo do idioma
            }else if(rdEmail.isSelected()) {
                column = 3;
                type = "Email";

            }else if(rdCnpj.isSelected()) {
                column = 5;
                type = "CNPJ";
            }

            for(int i = 0; i < tblModel.getRowCount(); ++i) { //percorre tabela
                if(rdNome.isSelected()) {
                    String nome = String.valueOf(tblModel.getValueAt(i, column)).trim();

                    if(nome.toLowerCase().contains(searchText)
                        || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                        found = true;
                        tblLocadora.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }else {
                    if(searchText.equals(String.valueOf(
                        tblModel.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                        found = true;
                        tblLocadora.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }
            }

            if(!found) { //se n foi encontrado

                if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                    JOptionPane.showMessageDialog(this, type + " { " + searchText + " } não encontrado!",
                        type + " Não Encontrado!", JOptionPane.ERROR_MESSAGE);
                }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                    JOptionPane.showMessageDialog(this, type + " { " + searchText + " } not found!",
                      type + " Not found!", JOptionPane.ERROR_MESSAGE);
                }


            }
            
        }else { //se a linha nao esta selecionada - if line is not selected
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Preencha a barra de pesquisa!", 
                        "Barra de Pesquisa Vazia!", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Fill out search bar!", 
                    "Empty Search Bar!", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_btnPesquisaActionPerformed
    
    
    
    
    private void rdNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdNomeActionPerformed

    private void rdCnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCnpjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCnpjActionPerformed

    private void btnAcessarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcessarActionPerformed
        int row = tblLocadora.getSelectedRow();
        if(row != -1) {
            if(clienteAcesso == null) { //se a tela nao foi iniciada - if screen was not init
                  clienteAcesso = new ClienteAcesso();
                  clienteAcesso.addWindowListener(new WindowAdapter() {
                      @Override
                      public void windowClosed(WindowEvent e) {
                         if(e.getComponent().equals(clienteAcesso)) { 
                             clienteAcesso = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                         }
                      }
                  });
                  
                  clienteAcesso.addLocadora(locadoraDao.get(
                    (Long) tblLocadora.getValueAt(row, 0))); // pega e adiciona locadora para operacoes necessarias - get and add locator to do all ops
                  clienteAcesso.addCliente(clienteAtual);
                  clienteAcesso.setVisible(true);

              }else if(clienteAcesso.getExtendedState() != NORMAL) {
                  clienteAcesso.setExtendedState(NORMAL);
              }else {
                  clienteAcesso.requestFocus();
              }
        }else { //se a linha nao esta selecionada - if line is not selected
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Linha não selecionada", 
                    "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
                
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "No line selected", 
                    "No Selection!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAcessarActionPerformed

    private void mniCartoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCartoesActionPerformed
        if(clienteCartoes == null) { //se a tela nao foi iniciada - if screen was not init
            clienteCartoes = new ClienteCartoes();
            clienteCartoes.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                   if(e.getComponent().equals(clienteCartoes)) { 
                       clienteCartoes = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                   }
                }
            });

//            clienteAcesso.addLocadora(locadoraDao.get(
//              (Long) tblLocadora.getValueAt(row, 0))); // pega e adiciona locadora para operacoes necessarias - get and add locator to do all ops
            clienteCartoes.addCliente(clienteAtual);
            clienteCartoes.setVisible(true);

        }else if(clienteCartoes.getExtendedState() != NORMAL) {
            clienteCartoes.setExtendedState(NORMAL);
        }else {
            clienteCartoes.requestFocus();
        }
    }//GEN-LAST:event_mniCartoesActionPerformed

    private void mniVeiculosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniVeiculosActionPerformed
        if(clienteLocacoes == null) { //se a tela nao foi iniciada - if screen was not init
            clienteLocacoes = new ClienteLocacoes();
            clienteLocacoes.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    if(e.getComponent().equals(clienteLocacoes)) {
                        clienteLocacoes = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again
                    }
                }
            });

            clienteLocacoes.addCliente(clienteAtual); //adiciona locadora para operacoes necessarias - add locator to do all ops
            clienteLocacoes.setVisible(true);

        }else if(clienteLocacoes.getExtendedState() != NORMAL) {
            clienteLocacoes.setExtendedState(NORMAL);
        }else {
            clienteLocacoes.requestFocus();
        }
    }//GEN-LAST:event_mniVeiculosActionPerformed

    private void mniLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLightActionPerformed

        //restaura frame para o padrao
        UIManager.put( "control", null);
        UIManager.put( "info", null);
        UIManager.put( "nimbusBase", null);
        UIManager.put( "nimbusAlertYellow", null);
        UIManager.put( "nimbusDisabledText", null);
        UIManager.put( "nimbusFocus", null);
        UIManager.put( "nimbusGreen", null);
        UIManager.put( "nimbusInfoBlue", null);
        UIManager.put( "nimbusLightBackground", null);
        UIManager.put( "nimbusOrange", null);
        UIManager.put( "nimbusRed", null);
        UIManager.put( "nimbusSelectedText", null);
        UIManager.put( "nimbusSelectionBackground", null);
        UIManager.put( "text", null);

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }

            }
            
            //toogle tema
            DesignApp.temaAtual = "light";
            
            //toogle menu
            mniLight.setSelected(true);
            mniDark.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = Color.BLACK;
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
        
            InstanceFrame.updateAllFrames(); //atualiza os frames abertos
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mniLightActionPerformed

    private void mniDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDarkActionPerformed

        //coloca padroes para o dark mode
        UIManager.put( "control", new Color( 128, 128, 128) );
        UIManager.put( "info", new Color(128,128,128) );
        UIManager.put( "nimbusBase", new Color( 18, 30, 49) );
        UIManager.put( "nimbusAlertYellow", new Color( 248, 187, 0) );
        UIManager.put( "nimbusDisabledText", new Color( 128, 128, 128) );
        UIManager.put( "nimbusFocus", new Color(115,164,209) );
        UIManager.put( "nimbusGreen", new Color(176,179,50) );
        UIManager.put( "nimbusInfoBlue", new Color( 66, 139, 221) );
        UIManager.put( "nimbusLightBackground", new Color( 18, 30, 49) );
        UIManager.put( "nimbusOrange", new Color(191,98,4) );
        UIManager.put( "nimbusRed", new Color(169,46,34) );
        UIManager.put( "nimbusSelectedText", new Color( 255, 255, 255) );
        UIManager.put( "nimbusSelectionBackground", new Color( 104, 93, 156) );
        UIManager.put( "text", new Color( 230, 230, 230) );

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "dark";
            
            //toogle menu
            mniDark.setSelected(true);
            mniLight.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            InstanceFrame.updateAllFrames(); //atualiza os frames abertos
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_mniDarkActionPerformed

    private void mniPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPortuguesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.PORTUGUES; //coloca idioma como portugues no IdiomaApp

        //toggle lang
        mniPortugues.setSelected(true);//muda para portugues
        mniIngles.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniPortuguesActionPerformed

    private void mniInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInglesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.INGLES; //coloca idioma como ingles no IdiomaApp

        //toggle lang
        mniIngles.setSelected(true);  //muda para ingles
        mniPortugues.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniInglesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EntradaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EntradaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EntradaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntradaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EntradaCliente().setVisible(true);
            }
        });
    }
    
    public void extraConfigs() {
        setTitle("FastVehicles | Entrada Cliente - "
                + clienteAtual.getNome().toUpperCase());
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }
       
        
        //confgs dos elementos - elements config
        lblTitulo.setFont(DesignApp.fonteTitulo);
        btnAcessar.setFont(DesignApp.fonteGeral);
        
        btnPesquisa.setFont(DesignApp.fonteGeral);
        txtPesquisa.setFont(DesignApp.fonteGeral);
        txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Pesquise cliente pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        txtPesquisa.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa.doClick();
                }
            }
        });
        
        rdId.setFont(DesignApp.fonteGeral);
        rdId.setSelected(true);
        rdCnpj.setFont(DesignApp.fonteGeral);
        rdEmail.setFont(DesignApp.fonteGeral);
        rdTelefone.setFont(DesignApp.fonteGeral);
        rdNome.setFont(DesignApp.fonteGeral);
        btnGroup = new ButtonGroup();
        btnGroup.add(rdId);
        btnGroup.add(rdCnpj);
        btnGroup.add(rdEmail);
        btnGroup.add(rdTelefone);
        btnGroup.add(rdNome);
                
        tblLocadora.setFont(DesignApp.fonteTabela);
       
        //configura table - setup table    
        tblModel = new DefaultTableModel(new String[]{"Id", "Nome", "Telefone", 
            "Email", "Endereco", "cnpj"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tblLocadora.setModel(tblModel);
        tblLocadora.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModel = ((DefaultTableColumnModel) tblLocadora.getColumnModel());
        tblColumnModel.getColumn(0).setPreferredWidth(30);
        tblColumnModel.getColumn(1).setPreferredWidth(150);
        tblColumnModel.getColumn(2).setPreferredWidth(90);
        tblColumnModel.getColumn(3).setPreferredWidth(150);
        tblColumnModel.getColumn(4).setPreferredWidth(100);

        //add locadoras na tabela - add locators to table
        for(Locadora loc: locadoraDao.getAll()) {
       
            tblModel.addRow(new Object[] {loc.getId(),    
            loc.getNome(), loc.getTelefone(), loc.getEmail(),
            loc.getEndereco(), loc.getCnpj()});

        }
        
        //toogle menu tema
        if(DesignApp.temaAtual.equals("light")) { //coloca light como selecionado
            mniLight.setSelected(true);
            mniDark.setSelected(false);
        }else { //coloca dark
            mniLight.setSelected(false);
            mniDark.setSelected(true);
        }
        
        //toggle menu lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
            mniPortugues.setSelected(true); //deixa mniLight checado
            mniIngles.setSelected(false);
        }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
            mniIngles.setSelected(true);
            mniPortugues.setSelected(false); //deixa mniLight checado
            updateLangComponents();
        }
    }
    
    public void addCliente(Cliente c) {
        this.clienteAtual = c;
        extraConfigs();
    }
    
    @Override
    public void resetaListenerCampos() {
        txtPesquisa.setText("");
        txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
        
        for(FocusListener focus: txtPesquisa.getFocusListeners()) { //percorre listeneers
            txtPesquisa.removeFocusListener(focus);//remove focus listeners
        }
        
        txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
            "Pesquise cliente pelo campo desejado",
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 0));              
    }

    public boolean placeholderOrEmpty(JTextField comp) { //verifica se campo tem texto de exemplo padrao
        return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR
            || comp.getText().trim().isEmpty();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcessar;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JMenu mnGerenciar;
    private javax.swing.JMenu mnLang;
    private javax.swing.JMenu mnOpcoes;
    private javax.swing.JMenu mnTema;
    private javax.swing.JMenuItem mniCartoes;
    private javax.swing.JCheckBoxMenuItem mniDark;
    private javax.swing.JCheckBoxMenuItem mniIngles;
    private javax.swing.JCheckBoxMenuItem mniLight;
    private javax.swing.JCheckBoxMenuItem mniPortugues;
    private javax.swing.JMenuItem mniVeiculos;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JPanel pnRadio;
    private javax.swing.JRadioButton rdCnpj;
    private javax.swing.JRadioButton rdEmail;
    private javax.swing.JRadioButton rdId;
    private javax.swing.JRadioButton rdNome;
    private javax.swing.JRadioButton rdTelefone;
    private javax.swing.JScrollPane scrlTblLocadora;
    private javax.swing.JTable tblLocadora;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public JCheckBoxMenuItem getMniDark(){
        return mniDark;
    }
    
    @Override
    public JCheckBoxMenuItem getMniLight(){
        return mniLight;
    }
    
  //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void updateLangComponents() {
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Client Entrance - "
                + clienteAtual.getNome().toUpperCase());
            
            lblTitulo.setText("Choose some locator");
            rdTelefone.setText("phone");
            rdNome.setText("name");
            
            for(FocusListener focus: txtPesquisa.getFocusListeners()) {
                txtPesquisa.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa.setText("Search client by some field");
            txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Search client by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));

            tblColumnModel.getColumn(1).setHeaderValue("Name");
            tblColumnModel.getColumn(2).setHeaderValue("Phone");
            tblColumnModel.getColumn(4).setHeaderValue("Address");
            tblLocadora.getTableHeader().resizeAndRepaint();
            
            mnGerenciar.setText("Manage");
            mniCartoes.setText("Cards");
            mniVeiculos.setText("Vehicles");
            mnOpcoes.setText("Settings");
            mnLang.setText("Language");
            mniPortugues.setText("Portuguese");
            mniIngles.setText("English");
            mnTema.setText("Theme");
            
            btnAcessar.setText("Get in");
            
            txtPesquisa.setToolTipText("Search for a cliente by selected field");
            btnPesquisa.setToolTipText("Search client");
            btnAcessar.setToolTipText("Get inside selected locator");
            rdId.setToolTipText("Search client by id");
            rdCnpj.setToolTipText("Search client by cnpj");
            rdTelefone.setToolTipText("Search client by phone");
            rdEmail.setToolTipText("Search client by email");
            rdNome.setToolTipText("Search client name");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            setTitle("FastVehicles | Entrada Cliente - "
                + clienteAtual.getNome().toUpperCase());
            lblTitulo.setText("Escolha uma locadora");
            rdTelefone.setText("telefone");
            rdNome.setText("nome");
            
            for(FocusListener focus: txtPesquisa.getFocusListeners()) {
                txtPesquisa.removeFocusListener(focus); //remove foucs listener em ingles
            }
            
            //add focus em portugues resetando o q precisar
            txtPesquisa.setText("Pesquise cliente pelo campo desejado");
            txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Pesquise cliente pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            tblColumnModel.getColumn(1).setHeaderValue("Nome");
            tblColumnModel.getColumn(2).setHeaderValue("Telefone");
            tblColumnModel.getColumn(4).setHeaderValue("Endereco");
            tblLocadora.getTableHeader().resizeAndRepaint();
            
            mnGerenciar.setText("Gerenciar");
            mniCartoes.setText("Cartões");
            mniVeiculos.setText("Veículos");
            mnOpcoes.setText("Opções");
            mnLang.setText("Linguagem");
            mniPortugues.setText("Português");
            mniIngles.setText("Inglês");
            mnTema.setText("Tema");
            
            btnAcessar.setText("Entrar");
            
            txtPesquisa.setToolTipText("Campo de pesquisa");
            btnPesquisa.setToolTipText("Clique para pesquisar");
            btnAcessar.setToolTipText("Acesse a locadora selecionada");
            rdId.setToolTipText("Pesquise cliente por id");
            rdCnpj.setToolTipText("Pesquise cliente por  cnpj");
            rdTelefone.setToolTipText("Pesquise cliente por  phone");
            rdEmail.setToolTipText("Pesquise cliente por  email");
            rdNome.setToolTipText("Pesquise cliente por  name");
            
	}

    }

    @Override
    public JCheckBoxMenuItem getMniIngles() {
        return mniIngles;
    }

    @Override
    public JCheckBoxMenuItem getMniPortugues() {
        return mniPortugues;
    }

}
