/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CarroDao;
import dao.ClienteDao;
import dao.InstanceDao;
import dao.LocadoraDao;
import dao.MotoDao;
import design.DesignApp;
import idioma.IdiomaApp;
import java.awt.Color;
import static java.awt.Frame.NORMAL;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import listener.TipNoFocus;
import modelos.Carro;
import modelos.Cliente;
import modelos.Locadora;
import modelos.Moto;
import modelos.Veiculo;

/**
 *
 * @author Isaac
 */
public class ClienteAcesso extends javax.swing.JFrame 
    implements WindowListener, FrameTheme, FrameMenuTheme,
        FrameLang, FrameMenuLang {

    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private CarroDao carroDao = InstanceDao.CARRO_DAO;
    private MotoDao motoDao = InstanceDao.MOTO_DAO;
    private ClienteDao clienteDao = InstanceDao.CLIENTE_DAO;
    private Cliente clienteAtual;
    private DefaultTableModel tblModelCarro;
    private DefaultTableColumnModel tblColumnModelCarro;
    private DefaultTableModel tblModelMoto;
    private DefaultTableColumnModel tblColumnModelMoto;
    private Locadora locadoraAtual; //locadora add na classe anterior pelo addLocadora - locator added in the ancient class
    private ButtonGroup btnGroup1;
    private ButtonGroup btnGroup2;
    private CarroDados carroDados;
    private MotoDados motoDados;
    private LocacaoFrame locacaoFrame;

    @Override
    public JCheckBoxMenuItem getMniDark() {
        return mniDark;
    }

    public void setMniDark(JCheckBoxMenuItem mniDark) {
        this.mniDark = mniDark;
    }
    
    @Override
    public JCheckBoxMenuItem getMniLight() {
        return mniLight;
    }

    public void setMniLight(JCheckBoxMenuItem mniLight) {
        this.mniLight = mniLight;
    }
    
    /**
     * Creates new form ClienteAcesso
     */
    public ClienteAcesso() {
        initComponents();
        
//        locadoraAtual = locadoraDao.get(1L); // to test
//        addLocadora(locadoraAtual);
//        addCliente(locadoraAtual.getClientes().get(0));
          addWindowListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGeral = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVeiculos = new javax.swing.JTabbedPane();
        pnConteudo1 = new javax.swing.JPanel();
        pnConteudo2 = new javax.swing.JPanel();
        btnPesquisa1 = new javax.swing.JButton();
        txtPesquisa1 = new javax.swing.JTextField();
        scrlTblVeiculo = new javax.swing.JScrollPane();
        tblCarro = new javax.swing.JTable();
        pnRadio1 = new javax.swing.JPanel();
        rdId1 = new javax.swing.JRadioButton();
        rdPlaca1 = new javax.swing.JRadioButton();
        rdModelo1 = new javax.swing.JRadioButton();
        rdMarca1 = new javax.swing.JRadioButton();
        rdTipo1 = new javax.swing.JRadioButton();
        rdAno1 = new javax.swing.JRadioButton();
        rdCor1 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMoto = new javax.swing.JTable();
        btnPesquisa2 = new javax.swing.JButton();
        txtPesquisa2 = new javax.swing.JTextField();
        pnRadio2 = new javax.swing.JPanel();
        rdId2 = new javax.swing.JRadioButton();
        rdPlaca2 = new javax.swing.JRadioButton();
        rdModelo2 = new javax.swing.JRadioButton();
        rdMarca2 = new javax.swing.JRadioButton();
        rdTipo2 = new javax.swing.JRadioButton();
        rdAno2 = new javax.swing.JRadioButton();
        rdCor2 = new javax.swing.JRadioButton();
        btnVisualizar1 = new javax.swing.JButton();
        btnLocar1 = new javax.swing.JButton();
        btnVisualizar2 = new javax.swing.JButton();
        btnLocar2 = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOpcoes = new javax.swing.JMenu();
        mnLang = new javax.swing.JMenu();
        mniPortugues = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniIngles = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnTema = new javax.swing.JMenu();
        mniLight = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniDark = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FastVehicles | Acesso do Cliente");

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1142, Short.MAX_VALUE)
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        btnPesquisa1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa1.setToolTipText("Clique para pesquisar");
        btnPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisa1ActionPerformed(evt);
            }
        });

        txtPesquisa1.setToolTipText("Barra de pesquisa");
        txtPesquisa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisa1ActionPerformed(evt);
            }
        });

        tblCarro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCarro.setToolTipText("Tabela de carros");
        scrlTblVeiculo.setViewportView(tblCarro);

        rdId1.setText("id");
        rdId1.setToolTipText("Pesquise por Id");

        rdPlaca1.setText("placa");
        rdPlaca1.setToolTipText("Pesquise por placa");
        rdPlaca1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdPlaca1ActionPerformed(evt);
            }
        });

        rdModelo1.setText("modelo");
        rdModelo1.setToolTipText("Pesquise por modelo");

        rdMarca1.setText("marca");
        rdMarca1.setToolTipText("Pesquise por marca");

        rdTipo1.setText("tipo");
        rdTipo1.setToolTipText("Pesquise por tipo");

        rdAno1.setText("ano");
        rdAno1.setToolTipText("Pesquise por ano");
        rdAno1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdAno1ActionPerformed(evt);
            }
        });

        rdCor1.setText("cor");
        rdCor1.setToolTipText("Pesquise por cor");
        rdCor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCor1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnRadio1Layout = new javax.swing.GroupLayout(pnRadio1);
        pnRadio1.setLayout(pnRadio1Layout);
        pnRadio1Layout.setHorizontalGroup(
            pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio1Layout.createSequentialGroup()
                .addComponent(rdId1)
                .addGap(18, 18, 18)
                .addComponent(rdPlaca1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdCor1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdModelo1)
                .addGap(18, 18, 18)
                .addComponent(rdTipo1)
                .addGap(18, 18, 18)
                .addComponent(rdMarca1)
                .addGap(18, 18, 18)
                .addComponent(rdAno1)
                .addGap(69, 69, 69))
        );
        pnRadio1Layout.setVerticalGroup(
            pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadio1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId1)
                    .addComponent(rdPlaca1)
                    .addComponent(rdModelo1)
                    .addComponent(rdMarca1)
                    .addComponent(rdTipo1)
                    .addComponent(rdAno1)
                    .addComponent(rdCor1))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        tblMoto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMoto.setToolTipText("Tabela de motos");
        jScrollPane2.setViewportView(tblMoto);

        btnPesquisa2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa2.setToolTipText("Clique para pesquisar");
        btnPesquisa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisa2ActionPerformed(evt);
            }
        });

        txtPesquisa2.setToolTipText("Barra de pesquisa");
        txtPesquisa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisa2ActionPerformed(evt);
            }
        });

        rdId2.setText("id");
        rdId2.setToolTipText("Pesquise por Id");

        rdPlaca2.setText("placa");
        rdPlaca2.setToolTipText("Pesquise por placa");
        rdPlaca2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdPlaca2ActionPerformed(evt);
            }
        });

        rdModelo2.setText("modelo");
        rdModelo2.setToolTipText("Pesquise por modelo");

        rdMarca2.setText("marca");
        rdMarca2.setToolTipText("Pesquise por marca");

        rdTipo2.setText("tipo");
        rdTipo2.setToolTipText("Pesquise por tipo");

        rdAno2.setText("ano");
        rdAno2.setToolTipText("Pesquise por ano");

        rdCor2.setText("cor");
        rdCor2.setToolTipText("Pesquise por cor");
        rdCor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCor2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnRadio2Layout = new javax.swing.GroupLayout(pnRadio2);
        pnRadio2.setLayout(pnRadio2Layout);
        pnRadio2Layout.setHorizontalGroup(
            pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio2Layout.createSequentialGroup()
                .addComponent(rdId2)
                .addGap(18, 18, 18)
                .addComponent(rdPlaca2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdCor2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdModelo2)
                .addGap(18, 18, 18)
                .addComponent(rdTipo2)
                .addGap(18, 18, 18)
                .addComponent(rdMarca2)
                .addGap(18, 18, 18)
                .addComponent(rdAno2)
                .addGap(69, 69, 69))
        );
        pnRadio2Layout.setVerticalGroup(
            pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadio2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadio2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId2)
                    .addComponent(rdPlaca2)
                    .addComponent(rdModelo2)
                    .addComponent(rdMarca2)
                    .addComponent(rdTipo2)
                    .addComponent(rdAno2)
                    .addComponent(rdCor2))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnVisualizar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/see.png"))); // NOI18N
        btnVisualizar1.setText("Visualizar");
        btnVisualizar1.setToolTipText("Visualizar carro");
        btnVisualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizar1ActionPerformed(evt);
            }
        });

        btnLocar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rent.png"))); // NOI18N
        btnLocar1.setText("Locar");
        btnLocar1.setToolTipText("Locar carro");
        btnLocar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocar1ActionPerformed(evt);
            }
        });

        btnVisualizar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/see.png"))); // NOI18N
        btnVisualizar2.setText("Visualizar");
        btnVisualizar2.setToolTipText("Visualizar moto");
        btnVisualizar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizar2ActionPerformed(evt);
            }
        });

        btnLocar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rent.png"))); // NOI18N
        btnLocar2.setText("Locar");
        btnLocar2.setToolTipText("Locar moto");
        btnLocar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnConteudo2Layout = new javax.swing.GroupLayout(pnConteudo2);
        pnConteudo2.setLayout(pnConteudo2Layout);
        pnConteudo2Layout.setHorizontalGroup(
            pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(btnPesquisa1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addComponent(txtPesquisa1)
                        .addGap(324, 324, 324))
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addComponent(pnRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnConteudo2Layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(btnPesquisa2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(pnRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPesquisa2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnConteudo2Layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnConteudo2Layout.createSequentialGroup()
                        .addContainerGap(31, Short.MAX_VALUE)
                        .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnConteudo2Layout.createSequentialGroup()
                                .addComponent(btnVisualizar2)
                                .addGap(41, 41, 41)
                                .addComponent(btnLocar2))
                            .addGroup(pnConteudo2Layout.createSequentialGroup()
                                .addComponent(btnVisualizar1)
                                .addGap(38, 38, 38)
                                .addComponent(btnLocar1)
                                .addGap(24, 24, 24))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 70, Short.MAX_VALUE))
        );
        pnConteudo2Layout.setVerticalGroup(
            pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudo2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPesquisa1)
                    .addComponent(txtPesquisa1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrlTblVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVisualizar1)
                    .addComponent(btnLocar1))
                .addGap(54, 54, 54)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPesquisa2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisa2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(pnConteudo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVisualizar2)
                    .addComponent(btnLocar2))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        lblTitulo.setText("Nome da Locadora");

        javax.swing.GroupLayout pnConteudo1Layout = new javax.swing.GroupLayout(pnConteudo1);
        pnConteudo1.setLayout(pnConteudo1Layout);
        pnConteudo1Layout.setHorizontalGroup(
            pnConteudo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConteudo1Layout.createSequentialGroup()
                .addGap(426, 426, 426)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnConteudo1Layout.createSequentialGroup()
                .addComponent(pnConteudo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 210, Short.MAX_VALUE))
        );
        pnConteudo1Layout.setVerticalGroup(
            pnConteudo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnConteudo1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addComponent(pnConteudo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbVeiculos.addTab("Veículos", pnConteudo1);

        jScrollPane1.setViewportView(tbVeiculos);

        mnOpcoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        mnOpcoes.setText("Opções");
        mnOpcoes.setToolTipText("");

        mnLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lang.png"))); // NOI18N
        mnLang.setText("Linguagem");

        mniPortugues.setSelected(true);
        mniPortugues.setText("Português");
        mniPortugues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazil.png"))); // NOI18N
        mniPortugues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPortuguesActionPerformed(evt);
            }
        });
        mnLang.add(mniPortugues);
        mnLang.add(jSeparator1);

        mniIngles.setSelected(true);
        mniIngles.setText("Inglês");
        mniIngles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usa.png"))); // NOI18N
        mniIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInglesActionPerformed(evt);
            }
        });
        mnLang.add(mniIngles);

        mnOpcoes.add(mnLang);
        mnOpcoes.add(jSeparator3);

        mnTema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/themes.png"))); // NOI18N
        mnTema.setText("Tema");

        mniLight.setSelected(true);
        mniLight.setText("Light");
        mniLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sun.png"))); // NOI18N
        mniLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLightActionPerformed(evt);
            }
        });
        mnTema.add(mniLight);
        mnTema.add(jSeparator4);

        mniDark.setSelected(true);
        mniDark.setText("Dark");
        mniDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/moon.png"))); // NOI18N
        mniDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDarkActionPerformed(evt);
            }
        });
        mnTema.add(mniDark);

        mnOpcoes.add(mnTema);

        jMenuBar1.add(mnOpcoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdCor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCor2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCor2ActionPerformed

    private void rdPlaca2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdPlaca2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdPlaca2ActionPerformed

    private void txtPesquisa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisa2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisa2ActionPerformed

    private void btnPesquisa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisa2ActionPerformed
        tblMoto.clearSelection(); //limpa selecoes - clear selections
       
        if(!placeholderOrEmpty(txtPesquisa2)) { //se barra de pesquisa n esta vazia
            
            String searchText = txtPesquisa2.getText(); //pega texto de pesquisa 
            boolean found = false;
            String type = "Id";
            int column = 0;

            //edita a coluna e tipo de dado - edit column and data type
            if(rdTipo2.isSelected()) {
                column = 1;
                type = "Tipo";
            }else if(rdMarca2.isSelected()) {
                column = 2;
                type = "Marca";
            }else if(rdModelo2.isSelected()) {
                column = 3;
                type = "Modelo";
            }else if(rdCor2.isSelected()) {
                column = 4;
                type = "Cor";
            }else if(rdPlaca2.isSelected()) {
                column = 5;
                type = "Placa";
            }else if(rdAno2.isSelected()) {
                column = 6;
                type = "Ano";
            }

            for(int i = 0; i < tblModelMoto.getRowCount(); ++i) { //percorre tabela
                if(!rdId2.isSelected()) { //se n for rdId q esta selecionaddo
                    String nome = String.valueOf(tblModelMoto.getValueAt(i, column)).trim();

                    if(nome.toLowerCase().contains(searchText)
                        || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                        found = true;
                        tblMoto.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }else {
                    if(searchText.equals(String.valueOf(
                        tblModelMoto.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                found = true;
                tblMoto.addRowSelectionInterval(i, i); //seleciona linha
            }
            }
            }

            if(!found) { //se n foi encontrado
                JOptionPane.showMessageDialog(this, type + " { " + searchText + " } de moto não encontrado !",
                    type + " Não Encontrado", JOptionPane.ERROR_MESSAGE);
            }

        }else { //se barra de pesquisa vazia
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Preencha a barra de pesquisa!", 
                        "Barra de Pesquisa Vazia!", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Fill out search bar!", 
                    "Empty Search Bar!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnPesquisa2ActionPerformed

    private void rdCor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCor1ActionPerformed

    private void rdAno1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdAno1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdAno1ActionPerformed

    private void rdPlaca1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdPlaca1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdPlaca1ActionPerformed

    private void txtPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisa1ActionPerformed

    private void btnPesquisa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisa1ActionPerformed
        tblCarro.clearSelection(); //limpa selecoes - clear selections

        if(!placeholderOrEmpty(txtPesquisa1)) { //se barra de pesquisa n esta vazia
            
            String searchText = txtPesquisa1.getText(); //pega texto de pesquisa 
            boolean found = false;
            String type = "Id";
            int column = 0;

            //edita a coluna e tipo de dado - edit column and data type
            if(rdTipo1.isSelected()) {
                column = 1;
                type = "Tipo";
            }else if(rdMarca1.isSelected()) {
                column = 2;
                type = "Marca";
            }else if(rdModelo1.isSelected()) {
                column = 3;
                type = "Modelo";
            }else if(rdCor1.isSelected()) {
                column = 4;
                type = "Cor";
            }else if(rdPlaca1.isSelected()) {
                column = 5;
                type = "Placa";
            }else if(rdAno1.isSelected()) {
                column = 6;
                type = "Ano";
            }

            for(int i = 0; i < tblModelCarro.getRowCount(); ++i) { //percorre tabela
                if(!rdId1.isSelected()) { //se n for rdId q esta selecionaddo
                    String nome = String.valueOf(tblModelCarro.getValueAt(i, column)).trim();

                    if(nome.toLowerCase().contains(searchText)
                        || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                        found = true;
                        tblCarro.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }else {
                    if(searchText.equals(String.valueOf(
                        tblModelCarro.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                found = true;
                tblCarro.addRowSelectionInterval(i, i); //seleciona linha
            }
            }
            }

            if(!found) { //se n foi encontrado
                JOptionPane.showMessageDialog(this, type + " { " + searchText + " } de carro não encontrado !",
                    type + " Não Encontrado", JOptionPane.ERROR_MESSAGE);
            }
        }else { //se barra de pesquisa vazia
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Preencha a barra de pesquisa!", 
                        "Barra de Pesquisa Vazia!", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Fill out search bar!", 
                    "Empty Search Bar!", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_btnPesquisa1ActionPerformed

    private void btnVisualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizar1ActionPerformed
        int row = tblCarro.getSelectedRow();
        if(row != -1) {
            if(carroDados == null) { //se a tela nao foi iniciada - if screen was not init
                carroDados = new CarroDados();
                carroDados.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(carroDados)) { 
                           carroDados = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });
                
                //add carro selecionado ao frame
                for(Veiculo v: locadoraAtual.getVeiculos()) {
                    if(v instanceof Carro) { //ver se eh uma instancia de carro
                    
                        if((Long) tblModelCarro.getValueAt(row, 0)
                            == v.getId()) { //verifica se ids sao iguais
                            carroDados.addCarro((Carro)v); //adiciona locadora para operacoes necessarias - add locator to do all ops
                            break; //fecha loop
                        }
                       
                    }
                }
                
                carroDados.setVisible(true); //torna frame visivel

            }else if(carroDados.getExtendedState() != NORMAL) {
                carroDados.setExtendedState(NORMAL);
            }else {
                carroDados.requestFocus();
            }
        
        }else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha", "Sem seleção!", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVisualizar1ActionPerformed

    private void btnVisualizar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizar2ActionPerformed
        int row = tblMoto.getSelectedRow();
        if(row != -1) {
            if(motoDados == null) { //se a tela nao foi iniciada - if screen was not init
                motoDados = new MotoDados();
                motoDados.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(motoDados)) { 
                           motoDados = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });
                
                //add carro selecionado ao frame
                for(Veiculo v: locadoraAtual.getVeiculos()) {
                    if(v instanceof Moto) { //ver se eh uma instancia de carro
                        if((Long) tblModelMoto.getValueAt(row, 0)
                            == v.getId()) { //verifica se ids sao iguais
                            motoDados.addMoto((Moto)v); //adiciona locadora para operacoes necessarias - add locator to do all ops
                            break; //fecha loop
                        }
                       
                    }
                }
                
                motoDados.setVisible(true); //torna frame visivel

            }else if(motoDados.getExtendedState() != NORMAL) {
                motoDados.setExtendedState(NORMAL);
            }else {
                motoDados.requestFocus();
            }
        
        }else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha", "Sem seleção!", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnVisualizar2ActionPerformed

    private void btnLocar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocar1ActionPerformed
        int row = tblCarro.getSelectedRow();
        if(row != -1) {
            if(locacaoFrame == null) { //se a tela nao foi iniciada - if screen was not init
                locacaoFrame = new LocacaoFrame();
                locacaoFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(locacaoFrame)) { 
                           locacaoFrame = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });
                
                locacaoFrame.addLocadora(locadoraAtual); //add loc
                locacaoFrame.addCliente(clienteAtual); //add cliente
                locacaoFrame.addClienteAcesso(this); //add clienteAcesso frame
                //add carro selecionado ao frame
                for(Veiculo v: locadoraAtual.getVeiculos()) {
//                    if(v instanceof Carro) { //ver se eh uma instancia de carro
                    
                    if((Long) tblModelCarro.getValueAt(row, 0)
                        == v.getId()) { //verifica se ids sao iguais
                        locacaoFrame.addVeiculo(v); //adiciona locadora para operacoes necessarias - add locator to do all ops
                        break; //fecha loop
                    }
                       
//                    }
                }
                
                locacaoFrame.setVisible(true); //torna frame visivel

            }else if(locacaoFrame.getExtendedState() != NORMAL) {
                locacaoFrame.setExtendedState(NORMAL);
            }else {
                locacaoFrame.requestFocus();
            }
        
        }else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha", "Sem seleção!", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLocar1ActionPerformed

    private void btnLocar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocar2ActionPerformed
        int row = tblMoto.getSelectedRow();
        if(row != -1) {
            if(locacaoFrame == null) { //se a tela nao foi iniciada - if screen was not init
                locacaoFrame = new LocacaoFrame();
                locacaoFrame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(e.getComponent().equals(locacaoFrame)) { 
                           locacaoFrame = null;  //coloca null para poder reiniciar a tela novamente - assign null to init again 
                       }
                    }
                });
                
                locacaoFrame.addLocadora(locadoraAtual);
                locacaoFrame.addCliente(clienteAtual);
                locacaoFrame.addClienteAcesso(this); //add clienteAcesso frame
                //add carro selecionado ao frame
                for(Veiculo v: locadoraAtual.getVeiculos()) {
//                    if(v instanceof Carro) { //ver se eh uma instancia de carro
                    
                    if((Long) tblModelMoto.getValueAt(row, 0)
                        == v.getId()) { //verifica se ids sao iguais
                        locacaoFrame.addVeiculo(v); //adiciona locadora para operacoes necessarias - add locator to do all ops
                        break; //fecha loop
                    }
                       
//                    }
                }
                
                locacaoFrame.setVisible(true); //torna frame visivel

            }else if(locacaoFrame.getExtendedState() != NORMAL) {
                locacaoFrame.setExtendedState(NORMAL);
            }else {
                locacaoFrame.requestFocus();
            }
        
        }else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha", "Sem seleção!", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLocar2ActionPerformed

    private void mniLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLightActionPerformed

        //restaura frame para o padrao
        UIManager.put( "control", null);
        UIManager.put( "info", null);
        UIManager.put( "nimbusBase", null);
        UIManager.put( "nimbusAlertYellow", null);
        UIManager.put( "nimbusDisabledText", null);
        UIManager.put( "nimbusFocus", null);
        UIManager.put( "nimbusGreen", null);
        UIManager.put( "nimbusInfoBlue", null);
        UIManager.put( "nimbusLightBackground", null);
        UIManager.put( "nimbusOrange", null);
        UIManager.put( "nimbusRed", null);
        UIManager.put( "nimbusSelectedText", null);
        UIManager.put( "nimbusSelectionBackground", null);
        UIManager.put( "text", null);

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "light";
            
            //toogle menu
            mniLight.setSelected(true);
            mniDark.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = Color.BLACK;
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            
            InstanceFrame.updateAllFrames(); //atualiza os frames abertos
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mniLightActionPerformed

    private void mniDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDarkActionPerformed

        //coloca padroes para o dark mode
        UIManager.put( "control", new Color( 128, 128, 128) );
        UIManager.put( "info", new Color(128,128,128) );
        UIManager.put( "nimbusBase", new Color( 18, 30, 49) );
        UIManager.put( "nimbusAlertYellow", new Color( 248, 187, 0) );
        UIManager.put( "nimbusDisabledText", new Color( 128, 128, 128) );
        UIManager.put( "nimbusFocus", new Color(115,164,209) );
        UIManager.put( "nimbusGreen", new Color(176,179,50) );
        UIManager.put( "nimbusInfoBlue", new Color( 66, 139, 221) );
        UIManager.put( "nimbusLightBackground", new Color( 18, 30, 49) );
        UIManager.put( "nimbusOrange", new Color(191,98,4) );
        UIManager.put( "nimbusRed", new Color(169,46,34) );
        UIManager.put( "nimbusSelectedText", new Color( 255, 255, 255) );
        UIManager.put( "nimbusSelectionBackground", new Color( 104, 93, 156) );
        UIManager.put( "text", new Color( 230, 230, 230) );

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "dark";
            
            //toogle menu
            mniDark.setSelected(true);
            mniLight.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            
            InstanceFrame.updateAllFrames(); //atualiza os frames abertos
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
          

    }//GEN-LAST:event_mniDarkActionPerformed

    private void mniPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPortuguesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.PORTUGUES; //coloca idioma como portugues no IdiomaApp

        //toggle lang
        mniPortugues.setSelected(true);//muda para portugues
        mniIngles.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniPortuguesActionPerformed

    private void mniInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInglesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.INGLES; //coloca idioma como ingles no IdiomaApp

        //toggle lang
        mniIngles.setSelected(true);  //muda para ingles
        mniPortugues.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniInglesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteAcesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteAcesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteAcesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteAcesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteAcesso().setVisible(true);
            }
        });
    }
    
    @Override
    public void resetaListenerCampos() {
        txtPesquisa1.setText("");
        txtPesquisa1.setForeground(DesignApp.FIELD_FONT_COLOR);
        txtPesquisa2.setText("");
        txtPesquisa2.setForeground(DesignApp.FIELD_FONT_COLOR);
        
        for(FocusListener focus: txtPesquisa1.getFocusListeners()) { //percorre listeneers
            txtPesquisa1.removeFocusListener(focus);//remove focus listeners
        }

        for(FocusListener focus: txtPesquisa2.getFocusListeners()) { //percorre listeners
            txtPesquisa2.removeFocusListener(focus);//remove focus listeners
        }
        
        txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
            "Pesquise carro pelo campo desejado",
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 0)); //add listener dnv com cores alteradas
        
        txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
            "Pesquise moto pelo campo desejado",
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
    }
        
        
    public void extraConfigs() {
        setTitle("FastVehicles | Acesso do Cliente - " 
            + clienteAtual.getNome().toUpperCase() 
            + " - Locadora - " + locadoraAtual.getNome().toUpperCase());
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }

        //configura tabela carros - setup car table    
        lblTitulo.setFont(DesignApp.fonteTitulo);
        lblTitulo.setText(locadoraAtual.getNome().toUpperCase());
        btnVisualizar2.setFont(DesignApp.fonteGeral);
        btnLocar2.setFont(DesignApp.fonteGeral);
        btnVisualizar2.setFont(DesignApp.fonteGeral);
        btnLocar2.setFont(DesignApp.fonteGeral);
        
        tblModelCarro = new DefaultTableModel(new String[]{"Id", "Tipo", "Marca", 
            "Modelo", "Cor", "Placa", "Ano", "ValorDiário"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tblCarro.setModel(tblModelCarro);
        tblCarro.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModelCarro = ((DefaultTableColumnModel) tblCarro.getColumnModel());
        tblColumnModelCarro.getColumn(0).setPreferredWidth(30);
        tblColumnModelCarro.getColumn(1).setPreferredWidth(200);
        tblColumnModelCarro.getColumn(2).setPreferredWidth(80);
        tblColumnModelCarro.getColumn(3).setPreferredWidth(150);
        tblColumnModelCarro.getColumn(4).setPreferredWidth(70);
        tblColumnModelCarro.getColumn(5).setPreferredWidth(90);
        
        updateTblCarro(); //atualiza tabela
//        System.out.println("extra " + locadoraAtual.getVeiculos());
        btnPesquisa1.setFont(DesignApp.fonteGeral);
        txtPesquisa1.setFont(DesignApp.fonteGeral);
        txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Pesquise carro pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPesquisa1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa1.doClick();
                }
            }
        });
        
        //organiza fontes - setup fontes
        rdId1.setFont(DesignApp.fonteGeral);
        rdId1.setSelected(true);
        rdPlaca1.setFont(DesignApp.fonteGeral);
        rdCor1.setFont(DesignApp.fonteGeral);
        rdModelo1.setFont(DesignApp.fonteGeral);
        rdTipo1.setFont(DesignApp.fonteGeral);
        rdMarca1.setFont(DesignApp.fonteGeral);
        rdAno1.setFont(DesignApp.fonteGeral);
        btnGroup1 = new ButtonGroup();
        btnGroup1.add(rdId1);
        btnGroup1.add(rdPlaca1);
        btnGroup1.add(rdCor1);
        btnGroup1.add(rdModelo1);
        btnGroup1.add(rdTipo1);
        btnGroup1.add(rdMarca1);
        btnGroup1.add(rdAno1);
        
        //configura tabela motos - setup bike table    
        tblModelMoto = new DefaultTableModel(new String[]{"Id", "Tipo", "Marca", 
            "Modelo", "Cor", "Placa", "Ano", "ValorDiário"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tblMoto.setModel(tblModelMoto);
        tblMoto.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModelMoto = ((DefaultTableColumnModel) tblMoto.getColumnModel());
        tblColumnModelMoto.getColumn(0).setPreferredWidth(30);
        tblColumnModelMoto.getColumn(1).setPreferredWidth(200);
        tblColumnModelMoto.getColumn(2).setPreferredWidth(80);
        tblColumnModelMoto.getColumn(3).setPreferredWidth(150);
        tblColumnModelMoto.getColumn(4).setPreferredWidth(70);
        tblColumnModelMoto.getColumn(5).setPreferredWidth(90);
        
        updateTblMoto(); //atualiza tabela
        
        btnPesquisa2.setFont(DesignApp.fonteGeral);
        txtPesquisa2.setFont(DesignApp.fonteGeral);
        txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Pesquise moto pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        txtPesquisa2.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa2.doClick();
                }
            }
        });
        
        //...
        rdId2.setFont(DesignApp.fonteGeral);
        rdId2.setSelected(true);
        rdPlaca2.setFont(DesignApp.fonteGeral);
        rdCor2.setFont(DesignApp.fonteGeral);
        rdModelo2.setFont(DesignApp.fonteGeral);
        rdTipo2.setFont(DesignApp.fonteGeral);
        rdMarca2.setFont(DesignApp.fonteGeral);
        rdAno2.setFont(DesignApp.fonteGeral);
        btnGroup2 = new ButtonGroup();
        btnGroup2.add(rdId2);
        btnGroup2.add(rdPlaca2);
        btnGroup2.add(rdCor2);
        btnGroup2.add(rdModelo2);
        btnGroup2.add(rdTipo2);
        btnGroup2.add(rdMarca2);
        btnGroup2.add(rdAno2);
        
        btnLocar1.setFont(DesignApp.fonteGeral);
        btnVisualizar1.setFont(DesignApp.fonteGeral);
        //toogle menu
        if(DesignApp.temaAtual.equals("light")) { //coloca light como selecionado
            mniLight.setSelected(true);
            mniDark.setSelected(false);
        }else { //coloca dark
            mniLight.setSelected(false);
            mniDark.setSelected(true);
        }

        //toggle menu lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
            mniPortugues.setSelected(true); //deixa mniLight checado
            mniIngles.setSelected(false);
        }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES){
            mniIngles.setSelected(true);
            mniPortugues.setSelected(false); //deixa mniLight checado
            updateLangComponents();
        }
        
    }
    
    private boolean isEmpty(JComponent comp) {  
        return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR ? true: false;
    }

    
    public void updateTblCarro() {
        tblModelCarro.setRowCount(0);

        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //add carros na tabela - add cars to table 
        for(Carro c: carroDao.getAllByLocadora(locadoraAtual)) {
            if(c.getCliente() == null) { //se veiculo n esta locado
                tblModelCarro.addRow(new Object[] {c.getId(),    
                c.getTipo(), c.getMarca(), c.getModelo(),
                c.getCor(), c.getPlaca(), c.getAno(),
                c.getValorDiario()});
            }
        }

        
    }
    
    public void updateTblMoto() {
        tblModelMoto.setRowCount(0);
        
        locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
        //add motos na tabela - add bikes to table
        for(Moto m: motoDao.getAllByLocadora(locadoraAtual)) {
            if(m.getCliente() == null) { //se veiculo n esta locado
                tblModelMoto.addRow(new Object[] {m.getId(),    
                m.getTipo(), m.getMarca(), m.getModelo(),
                m.getCor(), m.getPlaca(), m.getAno(),
                m.getValorDiario()});
            }

        }
    }
    
    public void addCliente(Cliente c) {
        this.clienteAtual = c;
        extraConfigs();
    }
    
    public void addLocadora(Locadora loc) {
        locadoraAtual = loc;
        //extraConfigs();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocar1;
    private javax.swing.JButton btnLocar2;
    private javax.swing.JButton btnPesquisa1;
    private javax.swing.JButton btnPesquisa2;
    private javax.swing.JButton btnVisualizar1;
    private javax.swing.JButton btnVisualizar2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JMenu mnLang;
    private javax.swing.JMenu mnOpcoes;
    private javax.swing.JMenu mnTema;
    private javax.swing.JCheckBoxMenuItem mniDark;
    private javax.swing.JCheckBoxMenuItem mniIngles;
    private javax.swing.JCheckBoxMenuItem mniLight;
    private javax.swing.JCheckBoxMenuItem mniPortugues;
    private javax.swing.JPanel pnConteudo1;
    private javax.swing.JPanel pnConteudo2;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JPanel pnRadio1;
    private javax.swing.JPanel pnRadio2;
    private javax.swing.JRadioButton rdAno1;
    private javax.swing.JRadioButton rdAno2;
    private javax.swing.JRadioButton rdCor1;
    private javax.swing.JRadioButton rdCor2;
    private javax.swing.JRadioButton rdId1;
    private javax.swing.JRadioButton rdId2;
    private javax.swing.JRadioButton rdMarca1;
    private javax.swing.JRadioButton rdMarca2;
    private javax.swing.JRadioButton rdModelo1;
    private javax.swing.JRadioButton rdModelo2;
    private javax.swing.JRadioButton rdPlaca1;
    private javax.swing.JRadioButton rdPlaca2;
    private javax.swing.JRadioButton rdTipo1;
    private javax.swing.JRadioButton rdTipo2;
    private javax.swing.JScrollPane scrlTblVeiculo;
    private javax.swing.JTabbedPane tbVeiculos;
    private javax.swing.JTable tblCarro;
    private javax.swing.JTable tblMoto;
    private javax.swing.JTextField txtPesquisa1;
    private javax.swing.JTextField txtPesquisa2;
    // End of variables declaration//GEN-END:variables
    
    
    //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
        //check menu items FramMenuLang
    @Override
    public JCheckBoxMenuItem getMniIngles() {
        return mniIngles;
    }

    @Override
    public JCheckBoxMenuItem getMniPortugues() {
        return mniPortugues;
    }
    
    public boolean placeholderOrEmpty(JTextField comp) { //verifica se campo tem texto de exemplo padrao
        return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR
            || comp.getText().trim().isEmpty();
    }
    
    //update lang method
    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Access Cliente - " 
                + clienteAtual.getNome().toUpperCase() 
                + " - Locator - " + locadoraAtual.getNome().toUpperCase());
            
            mnOpcoes.setText("Settings");
            mnLang.setText("Language");
            mniPortugues.setText("Portuguese");
            mniIngles.setText("English");
            mnTema.setText("Theme");
            
            tbVeiculos.setTitleAt(0, "Vehicles");
            
            for(FocusListener focus: txtPesquisa1.getFocusListeners()) {
                txtPesquisa1.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa1.setText("Search car by some field");
            txtPesquisa1.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Search car by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
             for(FocusListener focus: txtPesquisa2.getFocusListeners()) {
                txtPesquisa2.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa2.setText("Search bike by some field");
            txtPesquisa2.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Search bike by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            rdPlaca1.setText("plate");
            rdPlaca2.setText("plate");
            rdCor1.setText("color");
            rdCor2.setText("color");
            rdModelo1.setText("model");
            rdModelo2.setText("model");
            rdTipo1.setText("type");
            rdTipo2.setText("type");
            rdMarca1.setText("brand");
            rdMarca2.setText("brand");
            rdAno1.setText("year");
            rdAno2.setText("year");
            
            tblColumnModelCarro.getColumn(1).setHeaderValue("Type");
            tblColumnModelCarro.getColumn(2).setHeaderValue("Brand");
            tblColumnModelCarro.getColumn(3).setHeaderValue("Model");
            tblColumnModelCarro.getColumn(4).setHeaderValue("Color");
            tblColumnModelCarro.getColumn(5).setHeaderValue("Plate");
            tblColumnModelCarro.getColumn(6).setHeaderValue("Year");
            tblColumnModelCarro.getColumn(7).setHeaderValue("RentDay");
            tblCarro.getTableHeader().resizeAndRepaint();
            
            tblColumnModelMoto.getColumn(1).setHeaderValue("Type");
            tblColumnModelMoto.getColumn(2).setHeaderValue("Brand");
            tblColumnModelMoto.getColumn(3).setHeaderValue("Model");
            tblColumnModelMoto.getColumn(4).setHeaderValue("Color");
            tblColumnModelMoto.getColumn(5).setHeaderValue("Plate");
            tblColumnModelMoto.getColumn(6).setHeaderValue("Year");
            tblColumnModelMoto.getColumn(7).setHeaderValue("RentDay");
            tblMoto.getTableHeader().resizeAndRepaint();

           
            btnPesquisa1.setToolTipText("Press to search");
            btnPesquisa2.setToolTipText("Press to search");  
            txtPesquisa1.setToolTipText("Search bar");
            txtPesquisa2.setToolTipText("Search bar");            
            tblCarro.setToolTipText("Table of cars");
            tblMoto.setToolTipText("Table of bikes");          
            btnVisualizar1.setText("See car");
            btnVisualizar2.setText("See bike");           
            btnLocar1.setText("Rent car");
            btnLocar2.setText("Rent bike");           
            rdId1.setToolTipText("Search by id");
            rdId2.setToolTipText("Search by id");            
            rdPlaca1.setToolTipText("Search by plate");
            rdPlaca2.setToolTipText("Search by plate");            
            rdCor1.setToolTipText("Search by color");
            rdCor2.setToolTipText("Search by color");          
            rdModelo1.setToolTipText("Search by model");
            rdModelo2.setToolTipText("Search by model");
            rdTipo1.setToolTipText("Search by type");
            rdTipo2.setToolTipText("Search by type");
            rdMarca1.setToolTipText("Search by brand");
            rdMarca2.setToolTipText("Search by brand");
            rdAno1.setToolTipText("Search by year");
            rdAno2.setToolTipText("Search by year");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            setTitle("FastVehicles | Acesso do Cliente - " 
                + clienteAtual.getNome().toUpperCase() 
                + " - Locadora - " + locadoraAtual.getNome().toUpperCase());
            
            mnOpcoes.setText("Opções");
            mnLang.setText("Linguagem");
            mniPortugues.setText("Português");
            mniIngles.setText("Inglês");
            mnTema.setText("Tema");
            
            tbVeiculos.setTitleAt(0, "Veículos");
            
            for(FocusListener focus: txtPesquisa1.getFocusListeners()) {
                txtPesquisa1.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa1.setText("Pesquise carro pelo campo desejado");
            txtPesquisa1.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa1.addFocusListener(new TipNoFocus(txtPesquisa1,
                "Pesquise carro pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            for(FocusListener focus: txtPesquisa2.getFocusListeners()) {
                txtPesquisa2.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            //add focus em ingles resetando o q precisar
            txtPesquisa2.setText("Pesquise moto pelo campo desejado");
            txtPesquisa2.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa2.addFocusListener(new TipNoFocus(txtPesquisa2,
                "Pesquise moto pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            rdPlaca1.setText("placa");
            rdPlaca2.setText("placa");
            rdCor1.setText("cor");
            rdCor2.setText("cor");
            rdModelo1.setText("modelo");
            rdModelo2.setText("modelo");
            rdTipo1.setText("tipo");
            rdTipo2.setText("tipo");
            rdMarca1.setText("marca");
            rdMarca2.setText("marca");
            rdAno1.setText("ano");
            rdAno2.setText("ano");
            
            tblColumnModelCarro.getColumn(1).setHeaderValue("Tipo");
            tblColumnModelCarro.getColumn(2).setHeaderValue("Marca");
            tblColumnModelCarro.getColumn(3).setHeaderValue("Modelo");
            tblColumnModelCarro.getColumn(4).setHeaderValue("Cor");
            tblColumnModelCarro.getColumn(5).setHeaderValue("Placa");
            tblColumnModelCarro.getColumn(6).setHeaderValue("Ano");
            tblColumnModelCarro.getColumn(7).setHeaderValue("ValorDiário");
            tblCarro.getTableHeader().resizeAndRepaint();
            
            tblColumnModelMoto.getColumn(1).setHeaderValue("Tipo");
            tblColumnModelMoto.getColumn(2).setHeaderValue("Marca");
            tblColumnModelMoto.getColumn(3).setHeaderValue("Modelo");
            tblColumnModelMoto.getColumn(4).setHeaderValue("Cor");
            tblColumnModelMoto.getColumn(5).setHeaderValue("Placa");
            tblColumnModelMoto.getColumn(6).setHeaderValue("Ano");
            tblColumnModelMoto.getColumn(7).setHeaderValue("ValorDiário");
            tblMoto.getTableHeader().resizeAndRepaint();
            

            btnPesquisa1.setToolTipText("Clique para pesquisar");
            btnPesquisa2.setToolTipText("Clique para pesquisar");               
            txtPesquisa1.setToolTipText("Barra de pesquisa");
            txtPesquisa2.setToolTipText("Barra de pesquisa");
            tblCarro.setToolTipText("Tabela de carros");
            tblMoto.setToolTipText("Tabela de motos");          
            btnVisualizar1.setToolTipText("Visualizar carro");
            btnVisualizar2.setToolTipText("Visualizar moto");          
            btnLocar1.setToolTipText("Locar carro");
            btnLocar2.setToolTipText("Locar moto");           
            rdId1.setToolTipText("Pesquise por id");
            rdId2.setToolTipText("Pesquise por id");            
            rdPlaca1.setToolTipText("Pesquise por placa");
            rdPlaca2.setToolTipText("Pesquise por placa");
            rdCor1.setToolTipText("Pesquise por cor");
            rdCor2.setToolTipText("Pesquise por cor");            
            rdModelo1.setToolTipText("Pesquise por modelo");
            rdModelo2.setToolTipText("Pesquise por modelo");           
            rdTipo1.setToolTipText("Pesquise por tipo");
            rdTipo2.setToolTipText("Pesquise por tipo");
            rdMarca1.setToolTipText("Pesquise por marca");
            rdMarca2.setToolTipText("Pesquise por marca");
            rdAno1.setToolTipText("Pesquise por ano");
            rdAno2.setToolTipText("Pesquise por ano");
                      
	}
   }
    
}
