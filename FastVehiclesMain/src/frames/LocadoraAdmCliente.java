/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CarroDao;
import dao.ClienteDao;
import dao.InstanceDao;
import dao.LocacaoCarroDao;
import dao.LocacaoMotoDao;
import dao.LocadoraDao;
import dao.MotoDao;
import design.DesignApp;
import idioma.IdiomaApp;
import java.awt.Color;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import listener.TipNoFocus;
import modelos.Carro;
import modelos.Cliente;
import modelos.Locadora;
import modelos.Moto;


/**
 *
 * @author Isaac
 */
public class LocadoraAdmCliente extends javax.swing.JFrame 
    implements WindowListener, FrameTheme, FrameMenuTheme,
    FrameLang, FrameMenuLang {
    
    private ButtonGroup btnGroup;
    private DefaultTableModel tblModel;
    private DefaultTableColumnModel tblColumnModel;
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private ClienteDao clienteDao = InstanceDao.CLIENTE_DAO;
    private CarroDao carroDao = InstanceDao.CARRO_DAO;
    private MotoDao motoDao = InstanceDao.MOTO_DAO;
    private LocacaoCarroDao locacaoCarroDao = InstanceDao.LOCACAO_CARRO_DAO;
    private LocacaoMotoDao locacaoMotoDao = InstanceDao.LOCACAO_MOTO_DAO;
    private Locadora locadoraAtual;
//   private Locadora locadoraAtual = locadoraDao.get(1L) ; //to test
    
    /**
     * Creates new form LocadoraAdmCliente
     */
    public LocadoraAdmCliente() {
        initComponents();
        //extraConfigs(); chamo dentro do addLocadora pq preciso dela inicializada - it is called inside addLocadora cause I need locadoraAtual initialized
        addWindowListener(this);     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGeral = new javax.swing.JPanel();
        scrlTblCliente = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        btnPesquisa = new javax.swing.JButton();
        txtPesquisa = new javax.swing.JTextField();
        pnRadio = new javax.swing.JPanel();
        rdId = new javax.swing.JRadioButton();
        rdCpf = new javax.swing.JRadioButton();
        rdRg = new javax.swing.JRadioButton();
        rdEmail = new javax.swing.JRadioButton();
        rdCnh = new javax.swing.JRadioButton();
        rdNome = new javax.swing.JRadioButton();
        rdTelefone = new javax.swing.JRadioButton();
        btnExcluir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOpcoes = new javax.swing.JMenu();
        mnLang = new javax.swing.JMenu();
        mniPortugues = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniIngles = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnTema = new javax.swing.JMenu();
        mniLight = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mniDark = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FastVehicles | Gerenciar clientes");

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCliente.setToolTipText("Clientes");
        scrlTblCliente.setViewportView(tblCliente);

        btnPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnPesquisa.setToolTipText("Clique para pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });

        txtPesquisa.setToolTipText("Barra de pesquisa");
        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });

        rdId.setText("id");
        rdId.setToolTipText("Pesquise por id");

        rdCpf.setText("cpf");
        rdCpf.setToolTipText("Pesquise por CPF");

        rdRg.setText("rg");
        rdRg.setToolTipText("Pesquise por RG");

        rdEmail.setText("email");
        rdEmail.setToolTipText("Pesquise por email");

        rdCnh.setText("cnh");
        rdCnh.setToolTipText("Pesquise por CNH");

        rdNome.setText("nome");
        rdNome.setToolTipText("Pesquise por nome");
        rdNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdNomeActionPerformed(evt);
            }
        });

        rdTelefone.setText("telefone");
        rdTelefone.setToolTipText("Pesquise por telefone");

        javax.swing.GroupLayout pnRadioLayout = new javax.swing.GroupLayout(pnRadio);
        pnRadio.setLayout(pnRadioLayout);
        pnRadioLayout.setHorizontalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addComponent(rdId)
                .addGap(18, 18, 18)
                .addComponent(rdCpf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(rdRg)
                .addGap(18, 18, 18)
                .addComponent(rdCnh)
                .addGap(18, 18, 18)
                .addComponent(rdEmail)
                .addGap(18, 18, 18)
                .addComponent(rdTelefone)
                .addGap(18, 18, 18)
                .addComponent(rdNome)
                .addContainerGap())
        );
        pnRadioLayout.setVerticalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdId)
                    .addComponent(rdCpf)
                    .addComponent(rdRg)
                    .addComponent(rdEmail)
                    .addComponent(rdCnh)
                    .addComponent(rdNome)
                    .addComponent(rdTelefone))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setToolTipText("Exlcuir cliente");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrlTblCliente)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPesquisa)))
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(btnExcluir)))
                .addContainerGap(459, Short.MAX_VALUE))
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGeralLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPesquisa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(scrlTblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExcluir)
                .addGap(30, 30, 30))
        );

        mnOpcoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings.png"))); // NOI18N
        mnOpcoes.setText("Opções");
        mnOpcoes.setToolTipText("");

        mnLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lang.png"))); // NOI18N
        mnLang.setText("Linguagem");

        mniPortugues.setSelected(true);
        mniPortugues.setText("Português");
        mniPortugues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazil.png"))); // NOI18N
        mniPortugues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPortuguesActionPerformed(evt);
            }
        });
        mnLang.add(mniPortugues);
        mnLang.add(jSeparator1);

        mniIngles.setSelected(true);
        mniIngles.setText("Inglês");
        mniIngles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usa.png"))); // NOI18N
        mniIngles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInglesActionPerformed(evt);
            }
        });
        mnLang.add(mniIngles);

        mnOpcoes.add(mnLang);
        mnOpcoes.add(jSeparator3);

        mnTema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/themes.png"))); // NOI18N
        mnTema.setText("Tema");

        mniLight.setSelected(true);
        mniLight.setText("Light");
        mniLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sun.png"))); // NOI18N
        mniLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLightActionPerformed(evt);
            }
        });
        mnTema.add(mniLight);
        mnTema.add(jSeparator4);

        mniDark.setSelected(true);
        mniDark.setText("Dark");
        mniDark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/moon.png"))); // NOI18N
        mniDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDarkActionPerformed(evt);
            }
        });
        mnTema.add(mniDark);

        mnOpcoes.add(mnTema);

        jMenuBar1.add(mnOpcoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdNomeActionPerformed

    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed
        tblCliente.clearSelection();
        
        if(!placeholderOrEmpty(txtPesquisa)) { //se barra de pesquisa n esta vazia
            
            String searchText = txtPesquisa.getText(); //pega texto de pesquisa 
            boolean found = false;
            String type = "Id";
            int column = 0;
            

            //edita a coluna e tipo de dado - edit column and data type
            if(rdNome.isSelected()) {
               column = 1; 
               type = (IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES)
                        ? "Nome"
                        : "Name";

            }else if(rdTelefone.isSelected()) {
                column = 2;
                type = (IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES)
                        ? "Telefone"
                        : "Phone";
            }else if(rdEmail.isSelected()) {
                column = 3;
                type = "Email";
            }else if(rdRg.isSelected()) {
                column = 4;
                type = "RG";
            }else if(rdCpf.isSelected()) {
                column = 5;
                type = "CPF";
            }else if(rdCnh.isSelected()) {
                column = 6;
                type = "CNH";
            }

            for(int i = 0; i < tblModel.getRowCount(); ++i) { //percorre tabela
                if(rdNome.isSelected()) {
                    String nome = String.valueOf(tblModel.getValueAt(i, column)).trim();

                    if(nome.toLowerCase().contains(searchText) 
                        || nome.toUpperCase().contains(searchText) ) { //se contiver nome capitalizado ou não
                        found = true;
                        tblCliente.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }else {
                    if(searchText.equals(String.valueOf(
                        tblModel.getValueAt(i, column)).trim())) { //procura valor na linha i coluna 'column' de ids
                        found = true;
                        tblCliente.addRowSelectionInterval(i, i); //seleciona linha
                    }
                }
            }

            if(!found) { //se n foi encontrado
                if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                    JOptionPane.showMessageDialog(this, type + " { " + searchText + " } não encontrado!",
                        type + " Não Encontrado!", JOptionPane.ERROR_MESSAGE);
                }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                    JOptionPane.showMessageDialog(this, type + " { " + searchText + " } not found!",
                        type + " Not Found!", JOptionPane.ERROR_MESSAGE);
                }

            }

        }else { //se barra de pesquisa vazia
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Preencha a barra de pesquisa!", 
                        "Barra de Pesquisa Vazia!", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Fill out search bar!", 
                    "Empty Search Bar!", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int row = tblCliente.getSelectedRow();
        if(row != -1) {
            if( JOptionPane.YES_OPTION 
                == JOptionPane.showOptionDialog(this, 
                    "Deseja realmente deletar cliente"
                    + "\nEsta operação apagará todos os dados que o cliente tem nesta locadora e devolverá os carros locados", 
                    "Deletar Cliente?", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, 
                    null, 
                    new String[]{"Sim", "Não"},
                    "Sim") ) {  //se cliente confirmar a exclusao
                
                
                int rowCountWhenSel = tblModel.getRowCount(); //para resolver um problema mais tarde - to solve a problem late
                Long clienteId = (Long)(tblModel.getValueAt(row, 0)); //pega id - get id
                tblModel.removeRow(row); //remove linha selecionada - remove selected row

                locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora

                locadoraDao.deleteCliente(clienteId); //deleta cliente da locadora bd - delete client from locator on db
                //pega lista para remover o cliente
                List<Carro> locCarros = carroDao.getAllByLocadora(locadoraAtual); //lista de carros da locadora
                List<Moto> locMotos = motoDao.getAllByLocadora(locadoraAtual);//lista de motos da locadora

                for(Carro carro: locCarros) { //percorre lista de carros
                    if(carro.getCliente() != null) {       
                        if(carro.getCliente().getId() == clienteId) { //se carro for do cliente
                            carroDao.updateCliente(carro, null); //remove cliente
                        }
                    }
                }

                for(Moto moto: locMotos) { //percorre lista de motos
                    if(moto.getCliente() != null) {
                        if(moto.getCliente().getId() == clienteId) { //se moto for do cliente
                            motoDao.updateCliente(moto, null); //remove cliente
                        }
                    }
                }  

                locacaoCarroDao.deleteAllByCliente(clienteId); //del locs do carro
                locacaoMotoDao.deleteAllByCliente(clienteId); //del locs da moto


                //remove cliente da lista de clientes da locadora
                List<Cliente> clientes = locadoraAtual.getClientes();
                for(int i = 0; i < clientes.size(); ++i) {
                    if(clientes.get(i).getId() == clienteId) {
                        clientes.remove(i);
                    }
                }


                //mensagem de exclusao com sucesso
                URL url = getClass().getResource("/images/success.png");
                ImageIcon sucessIcon = new ImageIcon(url);
                
                if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                    JOptionPane.showMessageDialog(this, "Cliente excluído com sucesso!", 
                        "Cliente Excluído!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                    JOptionPane.showMessageDialog(this, "Client successfully deleted!", 
                        "Client Deleted!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                }

                
            }//fim cliente nao confirma exclusao

        }else { //se a linha nao esta selecionada - if line is not selected
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Linha não selecionada!", 
                    "Sem Seleção!", JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Select a line!", 
                    "No Selection!", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void mniLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLightActionPerformed

        //restaura frame para o padrao
        UIManager.put( "control", null);
        UIManager.put( "info", null);
        UIManager.put( "nimbusBase", null);
        UIManager.put( "nimbusAlertYellow", null);
        UIManager.put( "nimbusDisabledText", null);
        UIManager.put( "nimbusFocus", null);
        UIManager.put( "nimbusGreen", null);
        UIManager.put( "nimbusInfoBlue", null);
        UIManager.put( "nimbusLightBackground", null);
        UIManager.put( "nimbusOrange", null);
        UIManager.put( "nimbusRed", null);
        UIManager.put( "nimbusSelectedText", null);
        UIManager.put( "nimbusSelectionBackground", null);
        UIManager.put( "text", null);

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
            //toogle tema
            DesignApp.temaAtual = "light";
            
            //toogle menu
            mniLight.setSelected(true);
            mniDark.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = Color.BLACK;
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;

            InstanceFrame.updateAllFrames(); //atualiza os frames

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        

    }//GEN-LAST:event_mniLightActionPerformed

    private void mniDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDarkActionPerformed

        //coloca padroes para o dark mode
        UIManager.put( "control", new Color( 128, 128, 128) );
        UIManager.put( "info", new Color(128,128,128) );
        UIManager.put( "nimbusBase", new Color( 18, 30, 49) );
        UIManager.put( "nimbusAlertYellow", new Color( 248, 187, 0) );
        UIManager.put( "nimbusDisabledText", new Color( 128, 128, 128) );
        UIManager.put( "nimbusFocus", new Color(115,164,209) );
        UIManager.put( "nimbusGreen", new Color(176,179,50) );
        UIManager.put( "nimbusInfoBlue", new Color( 66, 139, 221) );
        UIManager.put( "nimbusLightBackground", new Color( 18, 30, 49) );
        UIManager.put( "nimbusOrange", new Color(191,98,4) );
        UIManager.put( "nimbusRed", new Color(169,46,34) );
        UIManager.put( "nimbusSelectedText", new Color( 255, 255, 255) );
        UIManager.put( "nimbusSelectionBackground", new Color( 104, 93, 156) );
        UIManager.put( "text", new Color( 230, 230, 230) );

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            
                    
            //toogle tema
            DesignApp.temaAtual = "dark";
            
            //toogle menu
            mniDark.setSelected(true);
            mniLight.setSelected(false);

            DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
            DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
            
            InstanceFrame.updateAllFrames(); //atualiza os frames

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        //toogle menu
        mniDark.setSelected(true);
        mniLight.setSelected(false);

        DesignApp.FIELD_FONT_COLOR = new Color(230, 230, 230);
        DesignApp.FIELD_FONT_TIP_COLOR = Color.GRAY;
    }//GEN-LAST:event_mniDarkActionPerformed

    private void mniPortuguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPortuguesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.PORTUGUES; //coloca idioma como portugues no IdiomaApp

        //toggle lang
        mniPortugues.setSelected(true);//muda para portugues
        mniIngles.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniPortuguesActionPerformed

    private void mniInglesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInglesActionPerformed
        IdiomaApp.idiomaAtual = IdiomaApp.INGLES; //coloca idioma como ingles no IdiomaApp

        //toggle lang
        mniIngles.setSelected(true);  //muda para ingles
        mniPortugues.setSelected(false);

        InstanceFrame.updateAllFramesLang(); //atualiza os frames
    }//GEN-LAST:event_mniInglesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocadoraAdmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocadoraAdmCliente().setVisible(true);
            }
        });
    }
    
    public void extraConfigs() {
          
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }
       
        
        //confgs dos elementos - elements config
        btnPesquisa.setFont(DesignApp.fonteGeral);
        txtPesquisa.setFont(DesignApp.fonteGeral);
        txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Pesquise cliente pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        txtPesquisa.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnPesquisa.doClick();
                }
            }
        });
        rdId.setFont(DesignApp.fonteGeral);
        rdId.setSelected(true);
        rdCpf.setFont(DesignApp.fonteGeral);
        rdRg.setFont(DesignApp.fonteGeral);
        rdCnh.setFont(DesignApp.fonteGeral);
        rdEmail.setFont(DesignApp.fonteGeral);
        rdTelefone.setFont(DesignApp.fonteGeral);
        rdNome.setFont(DesignApp.fonteGeral);
        btnGroup = new ButtonGroup();
        btnGroup.add(rdId);
        btnGroup.add(rdCpf);
        btnGroup.add(rdRg);
        btnGroup.add(rdCnh);
        btnGroup.add(rdEmail);
        btnGroup.add(rdTelefone);
        btnGroup.add(rdNome);
        
        tblCliente.setFont(DesignApp.fonteTabela);
        btnExcluir.setFont(DesignApp.fonteGeral);
       
        //configura table - setup table    
        tblModel = new DefaultTableModel(new String[]{"Id", "Nome", "Telefone", 
            "Email", "RG", "CPF", "CNH"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tblCliente.setModel(tblModel);
        tblCliente.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModel = ((DefaultTableColumnModel) tblCliente.getColumnModel());
        tblColumnModel.getColumn(0).setPreferredWidth(30);
        tblColumnModel.getColumn(1).setPreferredWidth(200);
        tblColumnModel.getColumn(2).setPreferredWidth(80);
        tblColumnModel.getColumn(3).setPreferredWidth(150);
        tblColumnModel.getColumn(4).setPreferredWidth(70);
        tblColumnModel.getColumn(5).setPreferredWidth(90);
        
        //add clientes na tabela - add clients to table
        for(Cliente c: clienteDao.getAllByLocadora(locadoraAtual)) {
            tblModel.addRow(new Object[] {c.getId(),    
            c.getNome(), c.getTelefone(), c.getEmail(),
            c.getRg(), c.getCpf(), c.getCnh()});

        }
        
        //toogle menu
        if(DesignApp.temaAtual.equals("light")) { //coloca light como selecionado
            mniLight.setSelected(true);
            mniDark.setSelected(false);
        }else { //coloca dark
            mniLight.setSelected(false);
            mniDark.setSelected(true);
        }

        
        //toggle menu lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
            mniPortugues.setSelected(true); //deixa mniLight checado
            mniIngles.setSelected(false);
        }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES){
            mniIngles.setSelected(true);
            mniPortugues.setSelected(false); //deixa mniLight checado
            updateLangComponents();
        }
        
    }

    @Override
    public JCheckBoxMenuItem getMniDark() {
        return mniDark;
    }

    public void setMniDark(JCheckBoxMenuItem mniDark) {
        this.mniDark = mniDark;
    }

    @Override
    public JCheckBoxMenuItem getMniLight() {
        return mniLight;
    }

    public void setMniLight(JCheckBoxMenuItem mniLight) {
        this.mniLight = mniLight;
    }
        
    public void addLocadora(Locadora loc) {
        locadoraAtual = loc;
        extraConfigs();
    }
    
    @Override
    public void resetaListenerCampos() {
        txtPesquisa.setText("");
        txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
        
        for(FocusListener focus: txtPesquisa.getFocusListeners()) { //percorre listeneers
            txtPesquisa.removeFocusListener(focus);//remove focus listeners
        }
        txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Pesquise cliente pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
    }
    
    public boolean placeholderOrEmpty(JTextField comp) { //verifica se campo tem texto de exemplo padrao
        return comp.getForeground() == DesignApp.FIELD_FONT_TIP_COLOR
            || comp.getText().trim().isEmpty();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenu mnLang;
    private javax.swing.JMenu mnOpcoes;
    private javax.swing.JMenu mnTema;
    private javax.swing.JCheckBoxMenuItem mniDark;
    private javax.swing.JCheckBoxMenuItem mniIngles;
    private javax.swing.JCheckBoxMenuItem mniLight;
    private javax.swing.JCheckBoxMenuItem mniPortugues;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JPanel pnRadio;
    private javax.swing.JRadioButton rdCnh;
    private javax.swing.JRadioButton rdCpf;
    private javax.swing.JRadioButton rdEmail;
    private javax.swing.JRadioButton rdId;
    private javax.swing.JRadioButton rdNome;
    private javax.swing.JRadioButton rdRg;
    private javax.swing.JRadioButton rdTelefone;
    private javax.swing.JScrollPane scrlTblCliente;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
    
    //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
       //check menu items FramMenuLang
    @Override
    public JCheckBoxMenuItem getMniIngles() {
        return mniIngles;
    }

    @Override
    public JCheckBoxMenuItem getMniPortugues() {
        return mniPortugues;
    }

    //update lang method
    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Locator - " + locadoraAtual.getNome()
                + " - ADM Clients");
            
            
            mnOpcoes.setText("Settings");
            mnLang.setText("Language");
            mniPortugues.setText("Portuguese");
            mniIngles.setText("English");
            mnTema.setText("Theme");
            
            for(FocusListener focus: txtPesquisa.getFocusListeners()) {
                txtPesquisa.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            txtPesquisa.setText("Search client by some field");
            txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Search client by some field",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
           rdTelefone.setText("phone"); 
           rdNome.setText("name");
            
            tblColumnModel.getColumn(1).setHeaderValue("Name");
            tblColumnModel.getColumn(2).setHeaderValue("Phone");
            tblCliente.getTableHeader().resizeAndRepaint();
            
            btnExcluir.setText("Delete");
            
            btnPesquisa.setToolTipText("Type to search");
            txtPesquisa.setToolTipText("Search bar");
            rdId.setToolTipText("Search by id");
            rdCpf.setToolTipText("Search by CPF");
            rdRg.setToolTipText("Search by RG");
            rdCnh.setToolTipText("Search by CNH");
            rdEmail.setToolTipText("Search by email");
            rdTelefone.setToolTipText("Search by phone");
            rdNome.setToolTipText("Search by name");
            tblCliente.setToolTipText("Clients");
            btnExcluir.setToolTipText("Delete client");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            setTitle("FastVehicles | Locadora - " + locadoraAtual.getNome()
                + " - ADM Clientes");
            
            mnOpcoes.setText("Opções");
            mnLang.setText("Linguagem");
            mniPortugues.setText("Português");
            mniIngles.setText("Inglês");
            mnTema.setText("Tema");
            
            
            for(FocusListener focus: txtPesquisa.getFocusListeners()) {
                txtPesquisa.removeFocusListener(focus); //remove foucs listener em portugues
            }
            
            txtPesquisa.setText("Pesquise cliente pelo campo desejado");
            txtPesquisa.setForeground(DesignApp.FIELD_FONT_COLOR);
            txtPesquisa.addFocusListener(new TipNoFocus(txtPesquisa,
                "Pesquise cliente pelo campo desejado",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
            
            rdTelefone.setText("Telefone"); 
            rdNome.setText("Nome"); 
            
            tblColumnModel.getColumn(1).setHeaderValue("Nome");
            tblColumnModel.getColumn(2).setHeaderValue("Telefone");
            tblCliente.getTableHeader().resizeAndRepaint();
            
            btnExcluir.setText("Excluir");
            
            btnPesquisa.setToolTipText("Clique para pesquisar");
            txtPesquisa.setToolTipText("Barra de pesquisa");
            rdId.setToolTipText("Pesquise por id");
            rdCpf.setToolTipText("Pesquise por CPF");
            rdRg.setToolTipText("Pesquise por RG");
            rdCnh.setToolTipText("Pesquise por CNH");
            rdEmail.setToolTipText("Pesquise por email");
            rdTelefone.setToolTipText("Pesquise por telefone");
            rdNome.setToolTipText("Pesquise por nome");
            tblCliente.setToolTipText("Clientes");
            btnExcluir.setToolTipText("Exlcuir cliente");

	}
   }
    
    

}
