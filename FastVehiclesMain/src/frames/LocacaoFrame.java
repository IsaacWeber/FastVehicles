/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import dao.CartaoDao;
import dao.InstanceDao;
import dao.LocacaoCarroDao;
import dao.LocacaoMotoDao;
import dao.LocadoraDao;
import design.DesignApp;
import java.awt.Color;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import modelos.Cartao;
import modelos.Cliente;
import dao.CarroDao;
import dao.ClienteDao;
import dao.MotoDao;
import idioma.IdiomaApp;
import java.awt.event.FocusListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import modelos.Locadora;
import modelos.Veiculo;
import javax.swing.JOptionPane;
import listener.TipNoFocus;
import modelos.Carro;
import modelos.Locacao;
import modelos.Moto;
import validadores.Validador;

/**
 *
 * @author Isaac
 */
public class LocacaoFrame extends javax.swing.JFrame
    implements FrameTheme, WindowListener, FrameLang {
    
    private LocadoraDao locadoraDao = InstanceDao.LOCADORA_DAO;
    private ClienteDao clienteDao = InstanceDao.CLIENTE_DAO;
    private CartaoDao cartaoDao = InstanceDao.CARTAO_DAO;
    private CarroDao carroDao = InstanceDao.CARRO_DAO;
    private MotoDao motoDao = InstanceDao.MOTO_DAO;
    public LocacaoCarroDao locacaoCarroDao = InstanceDao.LOCACAO_CARRO_DAO;
    public LocacaoMotoDao locacaoMotoDao = InstanceDao.LOCACAO_MOTO_DAO;
    private Locadora locadoraAtual; //locadora add na classe anterior pelo addLocadora - locator added in the ancient class
    private Cliente clienteAtual;
    private Veiculo veiculoAtual;
    private ClienteAcesso clienteAcesso;
    private DefaultTableModel tblModel;
    private DefaultTableColumnModel tblColumnModel;
    private CadastroCartao cadCartao;
    private ButtonGroup btnGroup = new ButtonGroup();
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); //formatter para a data
            
    /**
     * Creates new form LocacaoFrame
     */
    public LocacaoFrame() {
        initComponents();
//        locadoraAtual = locadoraDao.get(1L); // to test
//        addLocadora(locadoraAtual);
//        clienteAtual = locadoraAtual.getClientes().get(0);
//        addCliente(clienteAtual);
//        veiculoAtual = locadoraAtual.getVeiculos().get(0);
//        addVeiculo(veiculoAtual);
        addWindowListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnGeral = new javax.swing.JPanel();
        lblModelo = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        lblDataLoc = new javax.swing.JLabel();
        txtDataLoc = new javax.swing.JTextField();
        lblDataEntrega = new javax.swing.JLabel();
        txtDataEntrega = new javax.swing.JTextField();
        rdCartao = new javax.swing.JRadioButton();
        lblFormaPag = new javax.swing.JLabel();
        rdDinheiro = new javax.swing.JRadioButton();
        lblDescTbl = new javax.swing.JLabel();
        lblAlertaTbl = new javax.swing.JLabel();
        scrlTbl = new javax.swing.JScrollPane();
        tblCartao = new javax.swing.JTable();
        btnLocar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblModelo.setText("Modelo Veículo");

        txtModelo.setToolTipText("Modelo do veículo");
        txtModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModeloActionPerformed(evt);
            }
        });

        lblDataLoc.setText("Data Locação");

        txtDataLoc.setToolTipText("Data da locação do veículo");
        txtDataLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataLocActionPerformed(evt);
            }
        });

        lblDataEntrega.setText("Data Entrega");

        txtDataEntrega.setToolTipText("Digite a data de entrega do veículo");
        txtDataEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataEntregaActionPerformed(evt);
            }
        });

        rdCartao.setText("Cartão");

        lblFormaPag.setText("Forma de Pagamento");

        rdDinheiro.setText("Dinheiro");
        rdDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDinheiroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnGeralLayout = new javax.swing.GroupLayout(pnGeral);
        pnGeral.setLayout(pnGeralLayout);
        pnGeralLayout.setHorizontalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnGeralLayout.createSequentialGroup()
                        .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataLoc)
                            .addComponent(lblModelo)
                            .addComponent(lblDataEntrega))
                        .addGap(18, 18, 18)
                        .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblFormaPag))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdDinheiro)
                    .addComponent(rdCartao))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnGeralLayout.setVerticalGroup(
            pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGeralLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblModelo))
                .addGap(12, 12, 12)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDataLoc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDataEntrega))
                .addGap(26, 26, 26)
                .addComponent(lblFormaPag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdCartao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdDinheiro)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        lblDescTbl.setText("Selecione um cartão");

        lblAlertaTbl.setText("(Obrigatório)");

        tblCartao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCartao.setToolTipText("Cartões do cliente");
        scrlTbl.setViewportView(tblCartao);

        btnLocar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rent.png"))); // NOI18N
        btnLocar.setText("Confirmar Locação");
        btnLocar.setToolTipText("");
        btnLocar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(lblDescTbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAlertaTbl))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrlTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnLocar)
                .addGap(279, 279, 279))
            .addComponent(pnGeral, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescTbl)
                    .addComponent(lblAlertaTbl))
                .addGap(18, 18, 18)
                .addComponent(scrlTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLocar)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModeloActionPerformed

    private void txtDataLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataLocActionPerformed

    private void txtDataEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataEntregaActionPerformed

    private void rdDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDinheiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdDinheiroActionPerformed

    private void btnLocarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocarActionPerformed
        if(Validador.dataCerta(txtDataEntrega.getText().trim())) { //data valida
            try {
                //pega datas fazendo (parsing)
                java.sql.Date dataLoc = new java.sql.Date(
                    sdf.parse(txtDataLoc.getText().trim()).getTime()); //pega sql date da locacao (faz parse() depois getTime() depois instancia)
                java.sql.Date dataEntrega = new java.sql.Date(
                    sdf.parse(txtDataEntrega.getText().trim()).getTime()); //pega sql date da entrega (faz parse() depois getTime() depois instancia)

                //pega cartao 
                int row = tblCartao.getSelectedRow(); //pega linha selecionada
                if(row != -1) { //se tiver linha selecionada
                    long crtId = (Long) tblModel.getValueAt(row, 0); //pega id
                    for(Cartao cartao: clienteAtual.getCartoes()) {
                        if(crtId == cartao.getId()) { //pega cartao selecionado
                            //cria objeto locacao
                            Locacao locacao = new Locacao(locadoraAtual, clienteAtual, veiculoAtual,
                                cartao, dataLoc, dataEntrega, 
                                calcValorTotal(dataEntrega, dataLoc), 
                                rdCartao.isSelected() ? rdCartao.getText().trim() //pega tipo de pagamento
                                :rdDinheiro.getText().trim(), 0.0); //cria locacao

                            veiculoAtual.setCliente(clienteAtual); //envia novo cliente para o veiculo para fzr atualizacao
                            if(veiculoAtual instanceof Carro) { //se o veiculo eh um carro
                                locacaoCarroDao.save(locacao);//salva locacao por loc carro dao
                                carroDao.updateCliente((Carro)veiculoAtual, clienteAtual); //atualiza carro com novo cliente no bd
                            }else { //se o veiculo eh moto
                                locacaoMotoDao.save(locacao); //salva locacao por loc mot dao
                                motoDao.updateCliente((Moto)veiculoAtual, clienteAtual); //atualiza carro com novo cliente no bd
                            }
                            
                            locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //atualiza locadora para n ter erros
                            
                            boolean valido = true; //se pode add cliente
                            for(Cliente cliente: 
                                clienteDao.getAllByLocadora(locadoraAtual)) { //percorre clientes da locadora
                                if(cliente.getId() == clienteAtual.getId()) { // se id do cliente avaliado eh igual ao de alguma cliente
                                    valido = false; //n pode add 
                                    break; //fecha loop
                                }
                            }
                            
                            if(valido) { //se pode add cliente
                                locadoraDao.addCliente(locadoraAtual, clienteAtual);//cliente pertence a a locadora agora 
                            }
                            
                            break; //fecha loop
                        }
                    }
                    
                    locadoraAtual = locadoraDao.get(locadoraAtual.getId()); //faz um update na locadora - update locator
                    clienteAcesso.addLocadora(locadoraAtual); //atualiza locadora do cliente acesso
                    
                    if(veiculoAtual instanceof Carro) { //se o veiculo for um carro
                        clienteAcesso.updateTblCarro(); //atualiza tbl de carros
                    }else { //se for moto
                        clienteAcesso.updateTblMoto(); //atualiza tbl de motos
                    }
                    //mensagem de cadastro com sucesso
                    URL url = getClass().getResource("/images/success.png");
                    ImageIcon sucessIcon = new ImageIcon(url);
                    
                    if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                        JOptionPane.showMessageDialog(this, "Locacão do veículo \"" + veiculoAtual.getModelo()
                            + "\" realizada com sucesso!", 
                            "Locação realizada!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                    }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                        JOptionPane.showMessageDialog(this, "Vehicle \"" + veiculoAtual.getModelo()
                            + "\" successfully rented!", 
                            "Vehicle Rented!", JOptionPane.PLAIN_MESSAGE, sucessIcon);
                    }



                }else { 
                    
                    if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                        JOptionPane.showMessageDialog(this, "Selecione uma linha."
                            + "\nSe não tiver um cartão, cadastre um.",
                            "Linha sem Seleção!",
                            JOptionPane.ERROR_MESSAGE); 
                    }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                        JOptionPane.showMessageDialog(this, "Select a line."
                            + "\nIf you do'nt have a card, register one.",
                            "No Selection!",
                            JOptionPane.ERROR_MESSAGE); 
                    }

                }


            }catch(ParseException e) { //se parse exception
                System.err.println(e.getMessage()); 
            }

        }else { //data invalida
            
            if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) {
                JOptionPane.showMessageDialog(this, "Data inválida, verifique se: "
                    + "\n1 - A Data de entrega está vazia"
                    + "\n2 - O formato da data de entrega deve ser dd/MM/aaaa Ex.: 20/11/2090"
                    + "\n3 - A data de entrega é maior que a data de locação"
                    + "\n4 - A data tem dia, mês ou ano fora do intervalo do calendário.",
                    "Data de Entrega Inválida!",
                    JOptionPane.ERROR_MESSAGE);
            }else if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
                JOptionPane.showMessageDialog(this, "Invalid date, verify if: "
                    + "\n1 - Delivery date is empty"
                    + "\n2 - The delivery date pattern must be dd/MM/yyyy Ex.: 20/11/2090"
                    + "\n3 - Delivery date is bigger than rent date"
                    + "\n4 - Date has day, month or year without calendary interval.",
                    "Invalid Delivery Date!",
                    JOptionPane.ERROR_MESSAGE);
            }
            
        }

    }//GEN-LAST:event_btnLocarActionPerformed
    
    //calcula valor total a partir das datas e do veiculo atual
    private double calcValorTotal(java.sql.Date dataEntrega, java.sql.Date dataLocacao) {
        Calendar calEnt = Calendar.getInstance();
        calEnt.setTime(dataEntrega);
        Calendar calLoc = Calendar.getInstance();
        calLoc.setTime(dataLocacao);
        
        int[] dataEntArray = {calEnt.get(Calendar.DAY_OF_MONTH), 
            (calEnt.get(Calendar.MONTH) + 1), calEnt.get(Calendar.YEAR)}; //array com dados da data entrega
        
        int[] dataLocArray = {calLoc.get(Calendar.DAY_OF_MONTH), 
            (calLoc.get(Calendar.MONTH) + 1), calLoc.get(Calendar.YEAR)}; //array com dados da data entrega
                
        int dias = (dataEntArray[2] - dataLocArray[2])*365 //diferenca entre anos * 365
            + (dataEntArray[1] - dataLocArray[1])*30 //diferenca entre meses * 30
            + (dataEntArray[0] - dataLocArray[0]); //diferenca entre dias
        
//        System.out.println("dias " + dias);
        return dias * veiculoAtual.getValorDiario(); //multiplica dias pelo valor diario
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocacaoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocacaoFrame().setVisible(true);
            }
        });
    }

    public void extraConfigs() {
        setTitle("FastVehicles | Locação - " + veiculoAtual.getModelo());
        //configs do frame - frames config
        setLocationRelativeTo(null);
        //coloca icone no jframe - insert icon on jframe
        URL url = getClass().getResource("/images/car-default-img.png");
        if(!(url == null)) {
            setIconImage(new ImageIcon(url).getImage());
        }

        //configuracoes gerais - general configs
        lblModelo.setFont(DesignApp.fonteGeral);
        lblDataLoc.setFont(DesignApp.fonteGeral);
        lblDataEntrega.setFont(DesignApp.fonteGeral);
        txtDataEntrega.setFont(DesignApp.fonteGeral);
        txtDataEntrega.addFocusListener(new TipNoFocus(
                txtDataEntrega,"Ex.: 22/10/2099",
                DesignApp.FIELD_FONT_COLOR,
                DesignApp.FIELD_FONT_TIP_COLOR, 0));
        
        
        lblFormaPag.setFont(DesignApp.fonteGeral);
        rdCartao.setFont(DesignApp.fonteGeral);
        rdDinheiro.setFont(DesignApp.fonteGeral);
        rdCartao.setSelected(true);
        btnGroup.add(rdCartao);
        btnGroup.add(rdDinheiro);
        lblDescTbl.setFont(DesignApp.fonteGeral);      
        lblAlertaTbl.setFont(DesignApp.fonteGeral);
        lblAlertaTbl.setForeground(Color.RED);
        txtDataEntrega.setFont(DesignApp.fonteGeral);
        txtDataLoc.setFont(DesignApp.fonteGeral);
        txtModelo.setFont(DesignApp.fonteGeral);
        txtDataLoc.setEditable(false);
        txtModelo.setEditable(false);
        btnLocar.setFont(DesignApp.fonteGeral);
        tblCartao.setFont(DesignApp.fonteTabela);
        
        txtModelo.setText(veiculoAtual.getModelo());
        java.sql.Date date = new java.sql.Date(System.currentTimeMillis()); //data atual
        
        txtDataLoc.setText(sdf.format(date));
        
        
        //configura table - setup table    
        tblModel = new DefaultTableModel(new String[]{"Id", "Numero", 
            "Banco", "Validade", "Cvc", "Bandeira"}, 0) {
                
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tblCartao.setModel(tblModel);
        tblCartao.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tblColumnModel = ((DefaultTableColumnModel) tblCartao.getColumnModel());
        tblColumnModel.getColumn(0).setPreferredWidth(30);
        tblColumnModel.getColumn(1).setPreferredWidth(150);
        tblColumnModel.getColumn(2).setPreferredWidth(90);
        tblColumnModel.getColumn(3).setPreferredWidth(150);
        tblColumnModel.getColumn(4).setPreferredWidth(100);
        
        //add locadoras na tabela - add locators to table
        for(Cartao cartao: clienteAtual.getCartoes()) {
            tblModel.addRow(new Object[] {cartao.getId(),    
            cartao.getNumero(), cartao.getBanco(), cartao.getValidade(),
            cartao.getCvc(), cartao.getBandeira()});
        }
 
          //update lang
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) {
            updateLangComponents();
        }
        
    }
    
    public void addCliente(Cliente c) {
        this.clienteAtual = c;
    }
    
    public void addVeiculo(Veiculo v) {
        this.veiculoAtual = v;
        extraConfigs(); //chama extra para fzr configs
    }
    
    public void addLocadora(Locadora l) {
        this.locadoraAtual = l;
    }
    
    public void addClienteAcesso(ClienteAcesso ca) { //add var para o frame ClienteAcesso
        this.clienteAcesso = ca;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocar;
    private javax.swing.JLabel lblAlertaTbl;
    private javax.swing.JLabel lblDataEntrega;
    private javax.swing.JLabel lblDataLoc;
    private javax.swing.JLabel lblDescTbl;
    private javax.swing.JLabel lblFormaPag;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JPanel pnGeral;
    private javax.swing.JRadioButton rdCartao;
    private javax.swing.JRadioButton rdDinheiro;
    private javax.swing.JScrollPane scrlTbl;
    private javax.swing.JTable tblCartao;
    private javax.swing.JTextField txtDataEntrega;
    private javax.swing.JTextField txtDataLoc;
    private javax.swing.JTextField txtModelo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resetaListenerCampos() {
        txtDataEntrega.setText("");
        txtDataEntrega.setForeground(DesignApp.FIELD_FONT_COLOR);
    
        for(FocusListener focus: txtDataEntrega.getFocusListeners()) { //percorre listeneers
            txtDataEntrega.removeFocusListener(focus);//remove focus listeners
        }
        
        txtDataEntrega.addFocusListener(new TipNoFocus(
            txtDataEntrega,"Ex.: 22/10/2099",
            DesignApp.FIELD_FONT_COLOR,
            DesignApp.FIELD_FONT_TIP_COLOR, 0));
    }
    
    
     //window listener
    @Override
    public void windowOpened(WindowEvent e) {
        InstanceFrame.addFrame(this); //adiciona frame na lista de frames abertos
    }

    @Override
    public void windowClosing(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        InstanceFrame.removeFrame(this); //remove frame
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    //update lang method
    @Override
    public void updateLangComponents() {
        
        if(IdiomaApp.idiomaAtual == IdiomaApp.INGLES) { //se idioma eh ingles
            setTitle("FastVehicles | Rent - " + veiculoAtual.getModelo());
            
            lblModelo.setText("Vehicle Model");
            lblDataLoc.setText("Rent Date");
            lblDataEntrega.setText("Delivery Date");
            lblFormaPag.setText("Payment");
            rdCartao.setText("Card");
            rdDinheiro.setText("Money");
            
            lblDescTbl.setText("Select some card"); 
            lblAlertaTbl.setText("(Required)");
            
            tblColumnModel.getColumn(1).setHeaderValue("Number");
            tblColumnModel.getColumn(2).setHeaderValue("Bank");
            tblColumnModel.getColumn(3).setHeaderValue("Expiration");
            tblColumnModel.getColumn(5).setHeaderValue("Flag");
            tblCartao.getTableHeader().resizeAndRepaint();
            
            btnLocar.setText("Confirm Rent");
            
            txtModelo.setToolTipText("Vehicle model");
            txtDataLoc.setToolTipText("Vehicle rent date");
            txtDataEntrega.setToolTipText("Type vehicle delivery date");
            tblCartao.setToolTipText("Client cards\'");
            
	}else if(IdiomaApp.idiomaAtual == IdiomaApp.PORTUGUES) { //se for portugues
            setTitle("FastVehicles | Locação - " + veiculoAtual.getModelo());
            
            lblModelo.setText("Modelo Veículo");
            lblDataLoc.setText("Data Locação");
            lblDataEntrega.setText("Data Entrega");
            lblFormaPag.setText("Forma de Pagamento");
            rdCartao.setText("Cartão");
            rdDinheiro.setText("Dinheiro");
            
            lblDescTbl.setText("Selecione um cartão"); 
            lblAlertaTbl.setText("(Obrigatório)");
            
            tblColumnModel.getColumn(1).setHeaderValue("Número");
            tblColumnModel.getColumn(2).setHeaderValue("Banco");
            tblColumnModel.getColumn(3).setHeaderValue("Validade");
            tblColumnModel.getColumn(5).setHeaderValue("Bandeira");
            tblCartao.getTableHeader().resizeAndRepaint();
            
            btnLocar.setText("Confirmar Locação");
            
            txtModelo.setToolTipText("Modelo do veículo");
            txtDataLoc.setToolTipText("Data da locação do veículo");
            txtDataEntrega.setToolTipText("Digite a data de entrega do veículo");
            tblCartao.setToolTipText("Cfartões do cliente");
            
	}
   }
    
}
